> (use arc2js)

> (= expects-strings t)


> (tojs '(+ 10))
(10);

> (tojs '(+ 10 5))
(10 + 5);

> (tojs '(+ 10 5 6))
(10 + 5 + 6);

> (tojs '(+ 10 (+ 5 6)))
(10 + (5 + 6));


> (tojs "foobar")
"foobar";

> (tojs '(+ "foobar" 50))
("foobar" + 50);

> (tojs '(+ 10 5 6 "foobar"))
(10 + 5 + 6 + "foobar");


> (tojs nil)
undefined;

> (tojs '(is x nil))
(x === undefined);

> (tojs '(is x))
(x);

> (tojs '(is "foo"))
("foo");

> (tojs '(is x y z "foo"))
((x === y) && (x === z) && (x === "foo"));

> (tojs '(is (+ 10 5) 15))
((10 + 5) === 15);


> (w/whitespace minify
    (tojs '(is x y z "foo")))
((x===y)&&(x===z)&&(x==="foo"));


> (tojs '(fn ()))
(function () {});

> (tojs '(fn () nil))
(function () {});

> (tojs '(fn () (+ 10 5)))
(function () {
    return (10 + 5);
});

> (tojs '(fn (x) (+ 10 5)))
(function (x) {
    return (10 + 5);
});

> (tojs '(fn (x y) (+ 10 5)))
(function (x, y) {
    return (10 + 5);
});

> (tojs '(fn (x y z) (+ 10 5)))
(function (x, y, z) {
    return (10 + 5);
});

> (tojs '(fn (x) (+ x 5)))
(function (x) {
    return (x + 5);
});


> (tojs '(fn (x) (foo x 5)))
(function (x) {
    return foo(x, 5);
});

> (tojs '(fn (x) (foo-bar x 5)))
(function (x) {
    return foo_bar(x, 5);
});

> (tojs '(fn (x) (foo_bar x 5)))
(function (x) {
    return foo_bar(x, 5);
});


> (tojs '(fn (x) (+ 10 5) (foo-bar x 5)))
(function (x) {
    (10 + 5);
    return foo_bar(x, 5);
});


> (w/whitespace minify
    (tojs '(fn (x y z) (+ 10 5))))
(function(x,y,z){return (10+5);});


> (tojs '(fn () (let a 10 a)))
(function () {
    var a = 10;
    return a;
});

> (tojs '(fn () (let a 10 a) (let a 10 a)))
(function () {
    (function (a) {
        return a;
    })(10);
    return (function (a) {
        return a;
    })(10);
});

> (tojs '(with (a 5 b 10 c 20) (list a b c)))
(function (a, b, c) {
    return [a, b, c];
})(5, 10, 20);

> (tojs '(with (a 5 b 10 c 20) (list "foobar" b c)))
(function (a, b, c) {
    return ["foobar", b, c];
})(5, 10, 20);


> (tojs '(assign foo "bar"))
var foo = "bar";

> (tojs '(= foo "bar"))
var foo = "bar";

> (tojs '(= foo "bar" bar "qux"))
var foo = "bar";
\
var bar = "qux";

> (tojs '(fn ()
           (= foo "bar"
              bar "qux")))
(function () {
    return (function () {
        foo = "bar";
        return bar = "qux";
    })();
});


> (tojs '(if))
undefined;

> (tojs '(if foo))
foo;

> (tojs '(if (+ 50 10)))
(50 + 10);

> (tojs '(if foo "bar"))
(foo ? "bar" : undefined);

> (tojs '(if foo "bar" bar "qux"))
(foo ? "bar" : (bar ? "qux" : undefined));

> (tojs '(if foo "bar" bar "qux" "corge"))
(foo ? "bar" : (bar ? "qux" : "corge"));

> (tojs '(if foo "bar" bar "qux" qux "corge"))
(foo ? "bar" : (bar ? "qux" : (qux ? "corge" : undefined)));

> (tojs '(if (+ a 50) "bar" qux "corge"))
((a + 50) ? "bar" : (qux ? "corge" : undefined));


> (w/whitespace minify
    (tojs '(if (+ a 50) "bar" qux "corge")))
((a+50)?"bar":(qux?"corge":undefined));


> (tojs '(in x "foo" "bar" "qux"))
(function (__g59) {
    return ((__g59 === "foo") || (__g59 === "bar") || (__g59 === "qux"));
})(x);

> (tojs '(or "foo" "bar" "qux"))
("foo" || "bar" || "qux");

> (tojs '(and "foo" "bar" "qux"))
("foo" && "bar" && "qux");


> (tojs '(rfn foo-bar () foo-bar))
(function (foo_bar) {
    return foo_bar = (function () {
        return foo_bar;
    });
})(undefined);

> (tojs '(rfn foo-bar () (foo-bar)))
(function (foo_bar) {
    return foo_bar = (function () {
        return foo_bar();
    });
})(undefined);


> (tojs '(def foo () nil))
var foo = (function () {});

> (tojs '(def foo () (def bar nil)))
var foo = (function () {
    return bar = (function () {});
});


> (tojs '(def foo ()
           (def bar ()
             (def qux ()
               (def corge () nil)))))
var foo = (function () {
    return bar = (function () {
        return qux = (function () {
            return corge = (function () {});
        });
    });
});


> (w/whitespace minify
    (tojs '(def foo ()
             (def bar ()
               (def qux ()
                (def corge () nil))))))
var foo=(function(){return bar=(function(){return qux=(function(){return corge=(function(){});});});});


> (tojs '(= (foo 'bar) "qux"))
foo["bar"] = "qux";

> (tojs '(sref foo "qux" 'bar))
foo["bar"] = "qux";

> (tojs '(= (foo (foobar "qux")) "qux"))
foo[foobar("qux")] = "qux";

> (tojs '(sref foo "qux" (foobar "qux")))
foo[foobar("qux")] = "qux";


> (tojs '(prn "foo" "bar" "qux"))
console.log("foo", "bar", "qux");

> (tojs '(pr "foo" "bar" "qux"))
console.dir("foo", "bar", "qux");

> (tojs '(warn "foo" "bar" "qux"))
console.warn("foo", "bar", "qux");

> (tojs '(err "foo" "bar" "qux"))
console.error("foo", "bar", "qux");


> (tojs #\a)
"a";

> (tojs '(list #\a #\b #\newline #\space))
["a", "b", "
", " "];


> (tojs '(fn ()
           (let a 5)))
(function () {
    var a = 5;
});


> (tojs '(fn ()
           (let a 5)
           (+ a 50)))
(function () {
    (function (a) {})(5);
    return (a + 50);
});


> (tojs '(fn ()
           (let a 5 nil)))
(function () {
    var a = 5;
});


> (tojs '(fn ()
           (let a 5 a)))
(function () {
    var a = 5;
    return a;
});


> (tojs '(fn ()
           (let a 5
             (++ a 50)
             (+ 20 a))))
(function () {
    var a = 5;
    a = (a + 50);
    return (20 + a);
});


> (tojs '(let a 5
           (++ a 50)
           (+ 20 a)))
(function (a) {
    a = (a + 50);
    return (20 + a);
})(5);


> (tojs '(fn ()
           (do a b c)))
(function () {
    a;
    b;
    return c;
});


> (tojs '(fn ()
           (do a b c)
           nil))
(function () {
    a;
    b;
    c;
});


> (tojs '(fn ()
           (do a b c nil)))
(function () {
    a;
    b;
    c;
});


> (tojs '(fn ()
           (do a b c nil)
           nil))
(function () {
    a;
    b;
    c;
    undefined;
});


> (tojs '(fn ()
           (do a b c)
           (let a 10 a)))
(function () {
    a;
    b;
    c;
    return (function (a) {
        return a;
    })(10);
});


> (tojs '(fn ()
           (do a b c)
           a))
(function () {
    a;
    b;
    c;
    return a;
});


> (tojs '(do a b c))
a;
\
b;
\
c;


> (tojs '(do (= a 5) (= b 10 c 20)))
var a = 5;
\
var b = 10;
\
var c = 20;


> (tojs '(in foo "bar" "qux" "corge"))
(function (__g60) {
    return ((__g60 === "bar") || (__g60 === "qux") || (__g60 === "corge"));
})(foo);


> (tojs '(fn ()
           (in foo "bar" "qux" "corge")))
(function () {
    return (function (__g61) {
        return ((__g61 === "bar") || (__g61 === "qux") || (__g61 === "corge"));
    })(foo);
});


> (tojs '(fn ()
           (in foo "bar" "qux" "corge")
           (let a 50
             (in foo "bar" "qux" "corge"))))
(function () {
    (function (__g62) {
        return ((__g62 === "bar") || (__g62 === "qux") || (__g62 === "corge"));
    })(foo);
    return (function (a) {
        return (function (__g63) {
            return ((__g63 === "bar") || (__g63 === "qux") || (__g63 === "corge"));
        })(foo);
    })(50);
});


> (tojs '(fn ()
           (let a 50
             (in foo "bar" "qux" "corge"))))
(function () {
    var a = 50;
    return (function (__g64) {
        return ((__g64 === "bar") || (__g64 === "qux") || (__g64 === "corge"));
    })(foo);
});



> (tojs '(fn args))
(function () {});


> (tojs '(fn args (prn args)))
(function () {
    var args = Array.prototype.slice.call(arguments);
    return console.log(args);
});


> (tojs '(fn args (do (prn args))))
(function () {
    var args = Array.prototype.slice.call(arguments);
    return console.log(args);
});


> (tojs '(fn args (let x args (prn args))))
(function () {
    var args = Array.prototype.slice.call(arguments);
    var x = args;
    return console.log(args);
});



> (tojs '(fn (a b (o c))))
(function (a, b, c) {});


> (tojs '(fn (a b (o c)) (list a b c)))
(function (a, b, c) {
    return [a, b, c];
});


> (tojs '(fn (a b (o c)) (do (list a b c))))
(function (a, b, c) {
    return [a, b, c];
});


> (tojs '(fn (a b (o c)) (let x c (list a b c x))))
(function (a, b, c) {
    var x = c;
    return [a, b, c, x];
});



> (tojs '(fn (a b (o c 5))))
(function (a, b, c) {});


> (tojs '(fn (a b (o c 5)) (list a b c)))
(function (a, b, c) {
    c = c || 5;
    return [a, b, c];
});


> (tojs '(fn (a b (o c 5)) (do (list a b c))))
(function (a, b, c) {
    c = c || 5;
    return [a, b, c];
});


> (tojs '(fn (a b (o c 5)) (let x c (list a b c x))))
(function (a, b, c) {
    c = c || 5;
    var x = c;
    return [a, b, c, x];
});



> (tojs '(fn (a b (o c (foo "bar")))))
(function (a, b, c) {});


> (tojs '(fn (a b (o c (foo "bar"))) (list a b c)))
(function (a, b, c) {
    c = c || foo("bar");
    return [a, b, c];
});


> (tojs '(fn (a (o b 5) (o c (foo "bar")) (o d) (o e foo)) (list a b c)))
(function (a, b, c, d, e) {
    e = e || foo;
    c = c || foo("bar");
    b = b || 5;
    return [a, b, c];
});


> (tojs '(fn (a b (o c (foo "bar"))) (do (list a b c))))
(function (a, b, c) {
    c = c || foo("bar");
    return [a, b, c];
});


> (tojs '(fn (a b (o c (foo "bar"))) (let x c (list a b c x))))
(function (a, b, c) {
    c = c || foo("bar");
    var x = c;
    return [a, b, c, x];
});



> (tojs '(fn (a b . c)))
(function (a, b) {});


> (tojs '(fn (a b . c) c))
(function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return c;
});


> (tojs '(fn (a b . c) (list a b c)))
(function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return [a, b, c];
});


> (tojs '(fn (a b . c) (do (list a b c))))
(function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return [a, b, c];
});


> (tojs '(fn (a b . c) (let x c (list a b c x))))
(function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    var x = c;
    return [a, b, c, x];
});
