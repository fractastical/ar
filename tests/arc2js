> (use arc2js)

> (= expects-strings t)

> (mac test (x)
    `(w/uniq-counter 1 (tojs ',x)))


> (test (+ 10))
+10;

> (test (+ 10 5))
10 + 5;

> (test (+ 10 5 6))
10 + 5 + 6;

> (test (+ 10 5 6 7 8 9 10))
10 + 5 + 6 + 7 + 8 + 9 + 10;

> (test (+ 10 (+ 5 6)))
10 + (5 + 6);

> (test (+ 10 (- 5 6)))
10 + (5 - 6);

> (test (+ 10 (+ 5 6) 60 20))
10 + (5 + 6) + 60 + 20;

> (test (+ 10 (+ 5 6) 60 (- 1 5) 20))
10 + (5 + 6) + 60 + (1 - 5) + 20;

> (test (+ 1 (+ 2 (+ 3 (+ 4 5)))))
1 + (2 + (3 + (4 + 5)));

> (test (+ 10 (- 5 6) 1 2 (+ 4 5) (* 6 7)))
10 + (5 - 6) + 1 + 2 + (4 + 5) + 6 * 7;


> (test (* 10 5 6))
10 * 5 * 6;

> (test (* 10 (* 5 6)))
10 * (5 * 6);

> (test (* 10 (/ 5 6)))
10 * (5 / 6);

> (test (* 10 (/ 5 6) 1 2 (* 4 5) (+ 6 7)))
10 * (5 / 6) * 1 * 2 * (4 * 5) * (6 + 7);

> (test (* 1 (* 2 (* 3 (* 4 5)))))
1 * (2 * (3 * (4 * 5)));


> (test (* 1 (+ 2 (* 3 (+ 4 5)))))
1 * (2 + 3 * (4 + 5));

> (test (+ 1 (* 2 (+ 3 (* 4 5)))))
1 + 2 * (3 + 4 * 5);



> (test (arc (+ 10 5 6)))
21;

> (test (arc (str 10 5 6)))
"1056";


> (test "foobar")
"foobar";

> (test (+ "foobar" 50))
"foobar" + 50;

> (test (+ 10 5 6 "foobar"))
10 + 5 + 6 + "foobar";


> (test nil)
void 0;

> (test (is x nil))
x === void 0;

> (test (is x))
x;

> (test (is "foo"))
"foo";

> (test (is x y z "foo"))
x === y && y === z && z === "foo";

> (test (is (+ 10 5) 15))
10 + 5 === 15;


> (w/mode minify
    (test (is x y z "foo")))
x===y&&y===z&&z==="foo";


> (test (fn ()))
function () {};

> (test (fn () nil))
function () {};

> (test (fn () (+ 10 5)))
function () {
    return 10 + 5
};

> (test (fn (x) (+ 10 5)))
function (a) {
    return 10 + 5
};

> (test (fn (foobar) (+ 10 5 foobar)))
function (a) {
    return 10 + 5 + a
};

> (w/shorten? nil (test (fn (foobar) (+ 10 5 foobar))))
function (foobar) {
    return 10 + 5 + foobar
};


> (test (fn (x y) (+ 10 5)))
function (a, b) {
    return 10 + 5
};

> (test (fn (x y z) (+ 10 5)))
function (a, b, c) {
    return 10 + 5
};

> (test (fn (x) (+ x 5)))
function (a) {
    return a + 5
};


> (test (fn (x) (foo x 5)))
function (a) {
    return foo(a, 5)
};

> (test (fn (x) (foo-bar x 5)))
function (a) {
    return foo_bar(a, 5)
};

> (test (fn (x) (foo_bar x 5)))
function (a) {
    return foo_bar(a, 5)
};


> (test (fn (x) (+ 10 5) (foo-bar x 5)))
function (a) {
    10 + 5;
    return foo_bar(a, 5)
};


> (test (fn (foo-bar) (foo-bar (+ 10 5))))
function (a) {
    return a(10 + 5)
};


> (w/mode minify
    (test (fn (x y z) (+ 10 5))))
function(a,b,c){return 10+5};


> (test (fn () (let a 10 a)))
function () {
    var a = 10;
    return a
};


> (test (fn () (let a a a)))
function () {
    var b = a;
    return b
};


> (test (fn () (let a aa a)))
function () {
    var a = aa;
    return a
};


> (test (fn () (let a ab a)))
function () {
    var a = ab;
    return a
};


> (test (fn () (let a (a 10) a)))
function () {
    var b = a(10);
    return b
};


> (test (fn () (let a b a)))
function () {
    var a = b;
    return a
};


> (test (fn () (let a (a b) a)))
function () {
    var c = a(b);
    return c
};


> (test (fn () (let a (b a) a)))
function () {
    var c = b(a);
    return c
};


> (test (fn () (let a 10 a) a))
function () {
    var b = 10;
    b;
    return a
};


> (test (fn () (let a 10 a) (a 5)))
function () {
    var b = 10;
    b;
    return a(5)
};


> (test (fn () (let a 10 a) (let a 5 a)))
function () {
    var a = 10;
    a;
    var b = 5;
    return b
};



> (test (fn ()
          (with (a  1
                 b  2
                 c  3
                 d  4
                 e  5
                 f  6
                 g  7
                 h  8
                 i  9
                 j  10
                 k  11
                 l  12
                 m  13
                 n  14
                 o  15
                 p  16
                 q  17
                 r  18
                 s  19
                 t  20
                 u  21
                 v  22
                 w  23
                 x  24
                 y  25
                 z  26
                 a2 27
                 b2 28
                 c2 29)
            [a b c a2 b2 c2])))
function () {
    var a = 1,
        b = 2,
        c = 3,
        d = 4,
        e = 5,
        f = 6,
        g = 7,
        h = 8,
        i = 9,
        j = 10,
        k = 11,
        l = 12,
        m = 13,
        n = 14,
        o = 15,
        p = 16,
        q = 17,
        r = 18,
        s = 19,
        t = 20,
        u = 21,
        v = 22,
        w = 23,
        x = 24,
        y = 25,
        z = 26,
        a1 = 27,
        b1 = 28,
        c1 = 29;
    return [a, b, c, a1, b1, c1]
};


> (test (fn ()
          (with (a  1
                 b  2
                 c  3
                 d  4
                 e  5
                 f  6
                 g  7
                 h  8
                 i  9
                 j  10
                 k  11
                 l  12
                 m  13
                 n  14
                 o  15
                 p  16
                 q  17
                 r  18
                 s  19
                 t  20
                 u  21
                 v  22
                 w  23
                 x  24
                 y  25
                 z  26
                 aa aa
                 bb bb
                 cc cc
                 a1 a1
                 b1 b1
                 c1 c1)
            [a b c aa bb cc a1 b1 c1])))
function () {
    var a = 1,
        b = 2,
        c = 3,
        d = 4,
        e = 5,
        f = 6,
        g = 7,
        h = 8,
        i = 9,
        j = 10,
        k = 11,
        l = 12,
        m = 13,
        n = 14,
        o = 15,
        p = 16,
        q = 17,
        r = 18,
        s = 19,
        t = 20,
        u = 21,
        v = 22,
        w = 23,
        x = 24,
        y = 25,
        z = 26,
        d1 = aa,
        e1 = bb,
        f1 = cc,
        g1 = a1,
        h1 = b1,
        i1 = c1;
    return [a, b, c, d1, e1, f1, g1, h1, i1]
};


> (test (fn ()
          (with (a  1
                 b  2
                 c  3
                 d  4
                 e  5
                 f  6
                 g  7
                 h  8
                 i  9
                 j  10
                 k  11
                 l  12
                 m  13
                 n  14
                 o  15
                 p  16
                 q  17
                 r  18
                 s  19
                 t  20
                 u  21
                 v  22
                 w  23
                 x  24
                 y  25
                 z  26
                 a2 27
                 b2 28
                 c2 29
                 d2 30
                 e2 31
                 f2 32
                 g2 33
                 h2 34
                 i2 35
                 j2 36
                 k2 37
                 l2 38
                 m2 39
                 n2 40
                 o2 41
                 p2 42
                 q2 43
                 r2 44
                 s2 45
                 t2 46
                 u2 47
                 v2 48
                 w2 49
                 x2 50
                 y2 51
                 z2 52
                 a3 53
                 b3 54
                 c3 55
                 d3 56
                 e3 57
                 f3 58
                 g3 59
                 h3 60
                 i3 61
                 j3 62
                 k3 63
                 l3 64
                 m3 65
                 n3 66
                 o3 67
                 p3 68
                 q3 69
                 r3 70
                 s3 71
                 t3 72
                 u3 73
                 v3 74
                 w3 75
                 x3 76
                 y3 77
                 z3 78
                 z4 79)
            [a b c a2 b2 c2 a3 b3 c3])))
function () {
    var a = 1,
        b = 2,
        c = 3,
        d = 4,
        e = 5,
        f = 6,
        g = 7,
        h = 8,
        i = 9,
        j = 10,
        k = 11,
        l = 12,
        m = 13,
        n = 14,
        o = 15,
        p = 16,
        q = 17,
        r = 18,
        s = 19,
        t = 20,
        u = 21,
        v = 22,
        w = 23,
        x = 24,
        y = 25,
        z = 26,
        a1 = 27,
        b1 = 28,
        c1 = 29,
        d1 = 30,
        e1 = 31,
        f1 = 32,
        g1 = 33,
        h1 = 34,
        i1 = 35,
        j1 = 36,
        k1 = 37,
        l1 = 38,
        m1 = 39,
        n1 = 40,
        o1 = 41,
        p1 = 42,
        q1 = 43,
        r1 = 44,
        s1 = 45,
        t1 = 46,
        u1 = 47,
        v1 = 48,
        w1 = 49,
        x1 = 50,
        y1 = 51,
        z1 = 52,
        a2 = 53,
        b2 = 54,
        c2 = 55,
        d2 = 56,
        e2 = 57,
        f2 = 58,
        g2 = 59,
        h2 = 60,
        i2 = 61,
        j2 = 62,
        k2 = 63,
        l2 = 64,
        m2 = 65,
        n2 = 66,
        o2 = 67,
        p2 = 68,
        q2 = 69,
        r2 = 70,
        s2 = 71,
        t2 = 72,
        u2 = 73,
        v2 = 74,
        w2 = 75,
        x2 = 76,
        y2 = 77,
        z2 = 78,
        a3 = 79;
    return [a, b, c, a1, b1, c1, a2, b2, c2]
};


> (test (with (a 5 a 10 c 20) [a b c]))
(function (a, a, c) {
    return [a, b, c]
})(5, 10, 20);


> (test (with (a 5 b 10 c 20) [a b c]))
(function (a, b, c) {
    return [a, b, c]
})(5, 10, 20);


> (test (with (a 5 b 10 c 20) ["foobar" b c]))
(function (a, b, c) {
    return ["foobar", b, c]
})(5, 10, 20);


> (test (fn () (with (a 5 b 10 c 20) [a b c])))
function () {
    var a = 5,
        b = 10,
        c = 20;
    return [a, b, c]
};


> (test (fn () (with (a a b a c b) [a b c])))
function () {
    var c = a,
        d = a,
        e = b;
    return [c, d, e]
};



> (test (fn () (withs (a b b 2) [a b])))
function () {
    var a = b,
        c = 2;
    return [a, c]
};


> (test (fn () (withs (a b b 2 c b) [a b c])))
function () {
    var a = b,
        c = 2,
        d = c;
    return [a, c, d]
};



> (test (fn () (let a (+ 10 5) a)))
function () {
    var a = 10 + 5;
    return a
};


> (test (fn () (let a 5 (let a 10 a))))
function () {
    var a = 5,
        b = 10;
    return b
};


> (test (fn () (let a 5 (let b 10 [a b]))))
function () {
    var a = 5,
        b = 10;
    return [a, b]
};



> (test (fn ()
          (withs (a b
                  b 2
                  c b
                  d c
                  e e)
            [a b c d e])))
function () {
    var a = b,
        c = 2,
        d = c,
        f = d,
        g = e;
    return [a, c, d, f, g]
};



> (w/optimize? nil (test (fn () (withs (a b b 2 c b) [a b c]))))
function () {
    return (function (a) {
        return (function (b) {
            return (function (c) {
                return [a, b, c]
            })(b)
        })(2)
    })(b)
};


> (w/optimize? nil (test (fn () (withs (a b b 2 c b) [a b c this]))))
function () {
    return (function (a) {
        return (function (b) {
            return (function (c) {
                return [a, b, c, this]
            }).call(this, b)
        }).call(this, 2)
    }).call(this, b)
};


> (test (fn () (withs (a b b 2 c b) [a b c])))
function () {
    var a = b,
        c = 2,
        d = c;
    return [a, c, d]
};



> (test (fn () (let a a a)))
function () {
    var b = a;
    return b
};


> (test (let a a a))
(function (a) {
    return a
})(a);



> (test (fn () (with (a a b b) [a b])))
function () {
    var c = a,
        d = b;
    return [c, d]
};


> (test (fn ()
          (with (a (fn () (+ _ 1))
                 b (fn () (+ a 2))
                 c (fn () (+ b 3)))
            [a b])))
function () {
    var c = function () {
            return _ + 1
        },
        d = function () {
            return a + 2
        },
        e = function () {
            return b + 3
        };
    return [c, d]
};


> (test (fn ()
          (withs (a (fn () (+ _ 1))
                  b (fn () (+ a 2))
                  c (fn () (+ b 3)))
            [a b])))
function () {
    var a = function () {
            return _ + 1
        },
        b = function () {
            return a + 2
        },
        c = function () {
            return b + 3
        };
    return [a, b]
};


> (test (fn ()
          (let a (fn () (+ a 10))
            a)))
function () {
    var b = function () {
        return a + 10
    };
    return b
};


> (test (with (a a b b) [a b]))
(function (a, b) {
    return [a, b]
})(a, b);



> (test (assign))
\


> (test (assign foo "bar"))
var foo = "bar";


> (test (assign foo bar qux "bar"))
var foo = bar = qux = "bar";


> (test (= foo "bar"))
var foo = "bar";


> (test (= foo "bar"
           bar "qux"))
var foo = "bar";
\
var bar = "qux";


> (test (= foo bar
           bar qux
           qux qux))
var foo = bar;
\
var bar = qux;
\
var qux = qux;


> (test (fn ()
           (= foo "bar"
              bar "qux")))
var foo, bar;
\
function () {
    foo = "bar";
    return bar = "qux"
};



> (test (if))
void 0;

> (test (if foo))
foo;

> (test (if (+ 50 10)))
50 + 10;

> (test (if foo "bar"))
foo && "bar";

> (test (if foo "bar" bar "qux"))
foo ? "bar" : bar && "qux";

> (test (if foo "bar" bar "qux" "corge"))
foo ? "bar" : bar ? "qux" : "corge";

> (test (if foo "bar" bar "qux" qux "corge"))
foo ? "bar" : bar ? "qux" : qux && "corge";

> (test (if (+ a 50) "bar" qux "corge"))
a + 50 ? "bar" : qux && "corge";


> (w/mode minify
    (test (if (+ a 50) "bar" qux "corge")))
a+50?"bar":qux&&"corge";


> (test (in x "foo" "bar" "qux"))
(function (a) {
    return a === "foo" || a === "bar" || a === "qux"
})(x);


> (test (in x "foo" a b "bar" "qux" c))
(function (d) {
    return d === "foo" || d === a || d === b || d === "bar" || d === "qux" || d === c
})(x);


> (test (if (in foo 'a 'b) c))
(function (a) {
    return (a === "a" || a === "b") && c
})(foo);


> (test (fn ()
          (if (in foo 'a 'b) c)))
function () {
    var a = foo;
    return (a === "a" || a === "b") && c
};



> (test (do a))
a;


> (test a)
a;



> (test (fn ()
           (with (a (fn ())
                  b (fn (a) a))
             [a b])))
function () {
    var a = function () {},
        b = function (a) {
            return a
        };
    return [a, b]
};


> (test (with (a (fn ())
               b (fn (a) a))
          [a b]))
(function (a, b) {
    return [a, b]
})(function () {}, function (a) {
    return a
});


> (test (foo (with (a (fn ())
                    b (fn (a) a))
               [a b])))
(function (a, b) {
    return foo([a, b])
})(function () {}, function (a) {
    return a
});


> (test (fn ()
           (foo (with (a (fn ())
                       b (fn (a) a))
                  [a b]))))
function () {
    var a = function () {},
        b = function (a) {
            return a
        };
    return foo([a, b])
};


> (test (fn ()
           (foo (let a 5 a))))
function () {
    var a = 5;
    return foo(a)
};


> (test (fn ()
          (foo (let foo 5 foo))))
function () {
    var a = 5;
    return foo(a)
};


> (w/shorten? nil
    (test (fn ()
            (foo (let bar 5 bar)))))
function () {
    var bar = 5;
    return foo(bar)
};


> (w/shorten? nil
    (test (fn ()
            (foo (let foo 5 foo)))))
function () {
    return foo((function (foo) {
        return foo
    })(5))
};



> (test (let undefined 2 (if nil 3)))
(function (a) {
    return void 0 && 3
})(2);


> (w/mode minify (test (let undefined 2 (if nil 3))))
(function(a){return void 0&&3})(2);


> (test (let undefined 2 (if nil 3 (+ undefined 5))))
(function (a) {
    return void 0 ? 3 : a + 5
})(2);


> (test (let nil 2 (if nil 3)))
(function (a) {
    return void 0 && 3
})(2);


> (test (fn (nil a b c)
          (if nil 3 [nil a b c])))
function (a, b, c, d) {
    return void 0 ? 3 : [void 0, b, c, d]
};


> (test (fn nil
          (if nil 3 [nil a b c])))
function () {
    return void 0 ? 3 : [void 0, a, b, c]
};



> (test (or "foo" "bar" "qux"))
"foo" || "bar" || "qux";

> (test (and "foo" "bar" "qux"))
"foo" && "bar" && "qux";



> (test (or a))
a;


> (test (or a nil))
a || void 0;

> (test (or a nil b))
a || b;

> (test (or a "" b c d e))
a || b || c || d || e;


> (test (or nil a))
a;

> (test (or false a))
a;

> (test (or null a))
a;

> (test (or NaN a))
a;

> (test (or 0 a))
a;

> (test (or "" a))
a;


> (test (and a))
a;


> (test (and a nil))
a && void 0;

> (test (and a nil b))
a && void 0;

> (test (and a "" b c d e))
a && "";


> (test (and nil a))
void 0;

> (test (and false a))
false;

> (test (and null a))
null;

> (test (and NaN a))
NaN;

> (test (and 0 a))
0;

> (test (and "" a))
"";



> (test (rfn foo-bar () foo-bar))
(function (a) {
    return a = function () {
        return a
    }
})();

> (test (rfn foo-bar () (foo-bar)))
(function (a) {
    return a = function () {
        return a()
    }
})();

> (test (rfn foo (x)
          (foo x)))
(function (a) {
    return a = function (b) {
        return a(b)
    }
})();


> (test (def foo () nil))
var foo = function () {};

> (test (def foo () (def bar nil)))
var bar;
\
var foo = function () {
    return bar = function () {}
};



> (test (def foo ()
           (def bar ()
             (def qux ()
               (def corge () nil)))))
var bar, qux, corge;
\
var foo = function () {
    return bar = function () {
        return qux = function () {
            return corge = function () {}
        }
    }
};


> (w/mode minify
    (test (def foo ()
             (def bar ()
               (def qux ()
                (def corge () nil))))))
var bar,qux,corge;var foo=function(){return bar=function(){return qux=function(){return corge=function(){}}}};


> (test (= (foo 'bar) "qux"))
foo.bar = "qux";

> (test (sref foo "qux" 'bar))
foo.bar = "qux";

> (test (= (foo (foobar "qux")) "qux"))
foo[foobar("qux")] = "qux";

> (test (sref foo "qux" (foobar "qux")))
foo[foobar("qux")] = "qux";


> (test (prn "foo" "bar" "qux"))
console.log("foo", "bar", "qux");

> (test (pr "foo" "bar" "qux"))
console.dir("foo", "bar", "qux");

> (test (warn "foo" "bar" "qux"))
console.warn("foo", "bar", "qux");

> (test (err "foo" "bar" "qux"))
throw "foo" + " " + "bar" + " " + "qux";

> (test (err a b c))
throw a + " " + b + " " + c;


> (test #\a)
"a";

> (test [#\a #\b #\newline #\space])
["a", "b", "
", " "];


> (test (fn ()
           (let a 5)))
function () {
    var a = 5
};


> (test (fn ()
           (let a 5)
           (+ a 50)))
function () {
    var b = 5;
    return a + 50
};



> (test (fn ()
           (let a 5 nil)))
function () {
    var a = 5
};


> (test (fn ()
          (let a 5 void 0)))
function () {
    var a = 5;
    void;
    return 0
};


> (test (fn ()
          (let a 5 "void 0")))
function () {
    var a = 5;
    return "void 0"
};


> (test (fn ()
          (let a 5 '|void 0|)))
function () {
    var a = 5;
    return "void 0"
};


> (test (fn ()
          (let a 5 |void 0|)))
function () {
    var a = 5;
    return void_0
};


> (test (fn ()
          (let a 5 (arc '|void 0|))))
function () {
    var a = 5;
    return void_0
};


> (test (fn ()
          (let a 5 (arc (lit "void 0")))))
function () {
    var a = 5
};


> (test (fn ()
          (let a 5 (arc (lit '|void 0|)))))
function () {
    var a = 5
};



> (test (fn ()
           (let a 5 a)))
function () {
    var a = 5;
    return a
};


> (test (fn ()
           (let a 5
             (++ a 50)
             (+ 20 a))))
function () {
    var a = 5;
    a += 50;
    return 20 + a
};


> (test (= foo (document!createElement "foo")))
var foo = document.createElement("foo");


> (test (let a 5
          (++ a 50)
          (+ 20 a)))
(function (a) {
    a += 50;
    return 20 + a
})(5);


> (test (fn ()
          (do a b c)))
function () {
    a;
    b;
    return c
};


> (test (fn ()
          (do a b c)
          nil))
function () {
    a;
    b;
    c
};


> (test (fn ()
          (do a b c nil)))
function () {
    a;
    b;
    c
};


> (test (fn ()
          (do a b c nil)
          nil))
function () {
    a;
    b;
    c
};


> (test (fn ()
          (do a b c)
          (let a 10 a)))
function () {
    a;
    b;
    c;
    var d = 10;
    return d
};


> (test (fn ()
          (do b c d)
          (let a 10 a)))
function () {
    b;
    c;
    d;
    var a = 10;
    return a
};


> (test (fn ()
          (do (do a b) c (do d e f g) (do (do (do (do a)))))
          (let a 10 a)))
function () {
    a;
    b;
    c;
    d;
    e;
    f;
    g;
    a;
    var h = 10;
    return h
};


> (test (fn ()
          ((fn () ((fn () a b)) c ((fn () d e f g)) ((fn () ((fn () ((fn () ((fn () a))))))))))
          (let a 10 a)))
function () {
    a;
    b;
    c;
    d;
    e;
    f;
    g;
    a;
    var h = 10;
    return h
};


> (test (fn ()
           (do a b c)
           a))
function () {
    a;
    b;
    c;
    return a
};


> (test (do a b c))
a;
\
b;
\
c;


> (test (do (= a 5) (= b 10 c 20)))
var a = 5;
\
var b = 10;
\
var c = 20;


> (test (in foo "bar" "qux" "corge"))
(function (a) {
    return a === "bar" || a === "qux" || a === "corge"
})(foo);


> (test (fn ()
           (in foo "bar" "qux" "corge")))
function () {
    var a = foo;
    return a === "bar" || a === "qux" || a === "corge"
};


> (test (fn ()
           (in foo "bar" "qux" "corge")
           (let a 50
             (in foo "bar" "qux" "corge" a))))
function () {
    var a = foo;
    a === "bar" || a === "qux" || a === "corge";
    var b = 50,
        c = foo;
    return c === "bar" || c === "qux" || c === "corge" || c === b
};


> (test (fn ()
           (let a 50
             (in foo "bar" "qux" "corge"))))
function () {
    var a = 50,
        b = foo;
    return b === "bar" || b === "qux" || b === "corge"
};



> (test (uniq))
"a";

> (test (uniq (+ "__" 10 5)))
"a";


> (w/shorten? nil (test (uniq)))
"__g1";


> (w/shorten? nil (test (uniq nil)))
"__g1";


> (w/shorten? nil (test (uniq (+ "__" 10 5))))
"__1051";


> (w/shorten? nil (test (uniq 'foo)))
"foo1";

> (w/shorten? nil (test (uniq "foo")))
"foo1";


> (w/shorten? nil (test (do (uniq) (uniq))))
"__g1";
\
"__g2";


> (w/shorten? nil (test (do (uniq 'foo) (uniq 'foo))))
"foo1";
\
"foo2";



> (w/shorten? nil (test (arc (uniq))))
__g1;


> (w/shorten? nil (test (arc (uniq nil))))
__g1;


> (w/shorten? nil (test (arc (uniq (+ "__" 10 5)))))
__1051;


> (w/shorten? nil (test (arc (uniq 'foo))))
foo1;

> (w/shorten? nil (test (arc (uniq "foo"))))
foo1;


> (w/shorten? nil (test (do (arc:uniq) (arc:uniq))))
__g1;
\
__g2;


> (w/shorten? nil (test (do (arc:uniq "foo") (arc:uniq "foo"))))
foo1;
\
foo2;


> (w/shorten? nil (test (do (arc:uniq "bar") (arc:uniq "bar"))))
bar1;
\
bar2;


> (test (w/uniq u (+ u 5)))
(function (a) {
    return a + 5
})("a");


> (test (let a 10
          (w/uniq u (+ u 5))))
(function (a) {
    var b = "c";
    return b + 5
})(10);


> (test (w/uniq u `(+ ,u 5)))
(function (a) {
    return ["+"].concat(a, 5)
})("a");


> (test (fn () (arc:w/uniq u (str u 5))))
function () {
    return "__g5"
};


> (test (fn () (arc:w/uniq u u)))
function () {
    return a
};


> (test (fn () (w/uniq u `(+ ,u 5))))
function () {
    var a = "b";
    return ["+"].concat(a, 5)
};



> (w/uniq u (eval `(test (fn ,u (prn ,u)))))
function () {
    var a = Array.prototype.slice.call(arguments);
    return console.log(a)
};


> (w/uniq u (eval `(test (fn (a b . ,u) (prn ,u)))))
function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return console.log(c)
};



> (test (fn args))
function () {};


> (test (fn args (prn args)))
function () {
    var a = Array.prototype.slice.call(arguments);
    return console.log(a)
};


> (test (fn args (zap str args) (prn args)))
function () {
    var a = Array.prototype.slice.call(arguments);
    a = "" + a;
    return console.log(a)
};


> (w/optimize? nil (test (fn args (prn args))))
function () {
    return (function (a) {
        return console.log(a)
    })(Array.prototype.slice.call(arguments))
};


> (w/optimize? nil (test (fn args (zap str args) (prn args))))
function () {
    return (function (a) {
        a = "" + a;
        return console.log(a)
    })(Array.prototype.slice.call(arguments))
};


> (test (fn args (do (prn args))))
function () {
    var a = Array.prototype.slice.call(arguments);
    return console.log(a)
};


> (test (fn args (let x args (prn args))))
function () {
    var a = Array.prototype.slice.call(arguments),
        b = a;
    return console.log(a)
};


> (test (fn args (let x args (prn args x))))
function () {
    var a = Array.prototype.slice.call(arguments),
        b = a;
    return console.log(a, b)
};



> (test (fn (a b (o c))))
function (a, b, c) {};


> (test (fn (a b (o c)) [a b c]))
function (a, b, c) {
    return [a, b, c]
};


> (test (fn (a b (o c nil)) [a b c]))
function (a, b, c) {
    return [a, b, c]
};


> (test (fn (a b (o c)) (do [a b c])))
function (a, b, c) {
    return [a, b, c]
};


> (test (fn (a b (o c)) (let x c [a b c x])))
function (a, b, c) {
    var d = c;
    return [a, b, c, d]
};



> (test (fn (a b (o c 5))))
function (a, b, c) {};


> (test (fn (a b (o c 5)) [a b c]))
function (a, b, c) {
    c || (c = 5);
    return [a, b, c]
};


> (test (fn (a b (o c 5)) (do [a b c])))
function (a, b, c) {
    c || (c = 5);
    return [a, b, c]
};


> (test (fn (a b (o c 5)) (let x c [a b c x])))
function (a, b, c) {
    c || (c = 5);
    var d = c;
    return [a, b, c, d]
};



> (test (fn (a b (o c (foo "bar")))))
function (a, b, c) {};


> (test (fn (a b (o c (foo "bar"))) [a b c]))
function (a, b, c) {
    c || (c = foo("bar"));
    return [a, b, c]
};


> (test (fn (a (o b 5) (o c (foo "bar")) (o d) (o e foo)) [a b c]))
function (a, b, c, d, e) {
    e || (e = foo);
    c || (c = foo("bar"));
    b || (b = 5);
    return [a, b, c]
};


> (test (fn (a (o b 5) (o c (foo "bar")) (o d nil) (o e nil)) [a b c]))
function (a, b, c, d, e) {
    c || (c = foo("bar"));
    b || (b = 5);
    return [a, b, c]
};


> (test (fn (a b (o c (foo "bar"))) (do [a b c])))
function (a, b, c) {
    c || (c = foo("bar"));
    return [a, b, c]
};


> (test (fn (a b (o c (foo "bar"))) (let x c [a b c x])))
function (a, b, c) {
    c || (c = foo("bar"));
    var d = c;
    return [a, b, c, d]
};



> (test (fn (a b . c)))
function (a, b) {};


> (test (fn (a b . c) c))
function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return c
};


> (test (fn (a b . c) [a b c]))
function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return [a, b, c]
};


> (test (fn (a b . c) (do [a b c])))
function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return [a, b, c]
};


> (test (fn (a b . c) (let x c [a b c x])))
function (a, b) {
    var c = Array.prototype.slice.call(arguments, 2),
        d = c;
    return [a, b, c, d]
};


> (w/shorten? nil (test (fn (foo bar . c) (let x c [foo bar c x]))))
function (foo, bar) {
    var c = Array.prototype.slice.call(arguments, 2),
        x = c;
    return [foo, bar, c, x]
};


> (test (= window!foo (fn (a) (+ a 50))))
window.foo = function (a) {
    return a + 50
};


> (test (foo))
foo();

> (test (foo nil))
foo();

> (test (foo nil nil nil nil nil))
foo();

> (test (foo a nil nil nil nil))
foo(a);

> (test (foo nil nil nil nil a))
foo(void 0, void 0, void 0, void 0, a);

> (test (foo nil nil nil nil a nil))
foo(void 0, void 0, void 0, void 0, a);

> (test (foo nil nil nil nil a nil nil nil nil))
foo(void 0, void 0, void 0, void 0, a);

> (test (foo nil nil nil nil a nil nil nil nil b))
foo(void 0, void 0, void 0, void 0, a, void 0, void 0, void 0, void 0, b);

> (test (foo nil nil nil nil a nil nil nil nil b nil nil nil))
foo(void 0, void 0, void 0, void 0, a, void 0, void 0, void 0, void 0, b);

> (test (foo a b c))
foo(a, b, c);


> (test (+ 10 5 20 60 "foo" (+ 5 2 5) (* "nou" 5) (/ "testing" 2)))
10 + 5 + 20 + 60 + "foo" + (5 + 2 + 5) + "nou" * 5 + "testing" / 2;

> (test (* 10 5 20 60 "foo" (+ 5 2 5) (- "nou" 5) (/ "testing" 2)))
10 * 5 * 20 * 60 * "foo" * (5 + 2 + 5) * ("nou" - 5) * ("testing" / 2);


> (test (+ 10 5 (* 2 3) (/ 5 10)))
10 + 5 + 2 * 3 + 5 / 10;

> (test (* 10 5 (+ 2 3) (/ 5 10)))
10 * 5 * (2 + 3) * (5 / 10);


> (test (fn ()
           (let a 5
             (fn () a))
           (let a 2)))
function () {
    var a = 5;
    function () {
        return a
    };
    var b = 2
};


> (test (if a b c (+ 10 5)))
a ? b : c && 10 + 5;


> (test (if a b (and c (+ 10 5))))
a ? b : c && 10 + 5;


> (test (if a b c (+ 10 5) d (+ c 50 (+ d 20))))
a ? b : c ? 10 + 5 : d && c + 50 + (d + 20);


> (test (if a b c (+ 10 5) d (+ c 50 (+ d 20)) e (+ 10 (* 20 5 6) 6)))
a ? b : c ? 10 + 5 : d ? c + 50 + (d + 20) : e && 10 + 20 * 5 * 6 + 6;


> (test (if a b c (+ 10 5) d (+ c 50 (+ d 20)) (and e (+ 10 (* 20 5 6) 6))))
a ? b : c ? 10 + 5 : d ? c + 50 + (d + 20) : e && 10 + 20 * 5 * 6 + 6;


> (test (if foo-bar a b c))
foo_bar ? a : b && c;


> (test (fn () (= foo-bar "qux")))
var foo_bar;
\
function () {
    return foo_bar = "qux"
};


> (test (rfn foo-bar (foo-bar)))
(function (a) {
    return a = function (a) {}
})();


> (test (rfn foo-bar () (foo-bar)))
(function (a) {
    return a = function () {
        return a()
    }
})();



> (test (and 1 2 (or 3 4 5)))
1 && 2 && (3 || 4 || 5);


> (test (or 1 2 (and 3 4 5)))
1 || 2 || 3 && 4 && 5;


> (test (or (is 1 2) (is 3 4) (is 5 6)))
1 === 2 || 3 === 4 || 5 === 6;


> (test (if (= a 5) a))
var a;
\
(a = 5) && a;


> (test (* 2 (/ 3 4) 5))
2 * (3 / 4) * 5;

> (test (/ 2 (* 3 4) 5))
2 / (3 * 4) / 5;


> (test (+ 1 (- 1e20 1e20) 2))
1 + (1e+20 - 1e+20) + 2;

> (test (- 1 (+ 1e20 1e20) 2))
1 - (1e+20 + 1e+20) - 2;


> (test (no a))
!a;

> (test (no "foo"))
!"foo";

> (test (no nil))
!void 0;

> (test (no (no nil)))
!!void 0;

> (test (no (+ 10 5)))
!(10 + 5);


> (test (del a))
delete a;

> (test (del a b c))
error: #<procedure>: expects 2 arguments, given 4: |delete | a b c

> (test (del foo!bar))
delete foo.bar;


> (test (+ 5))
+5;

> (test (- 5))
-5;


> (test (+ "foo"))
+"foo";

> (test (- "foo"))
-"foo";


> (test (+ (+ "foo")))
+(+"foo");

> (test (- (- "foo")))
-(-"foo");


> (test (+ (+ (+ "foo"))))
+(+(+"foo"));

> (test (- (- (- "foo"))))
-(-(-"foo"));


> (test (+ (+ (+ (+ "foo")))))
+(+(+(+"foo")));

> (test (- (- (- (- "foo")))))
-(-(-(-"foo")));


> (test (+ 1 1e20 (- 1e20)))
1 + 1e+20 + -1e+20;

> (test (+ 1 1e20 (+ 1e20)))
1 + 1e+20 + (+1e+20);


> (test (* 1 1e20 (* 1e20)))
1 * 1e+20 * 1e+20;

> (test (* 1 1e20 (/ 1e20)))
1 * 1e+20 * 1e+20;

> (test (* 1 1e20 (+ 1e20)))
1 * 1e+20 * +1e+20;

> (test (* 1 1e20 (- 1e20)))
1 * 1e+20 * -1e+20;


> (test (if (= a 1) (= b 2) (= c 3) (= d 4) (= e 5)))
var a, b, c, d, e;
\
(a = 1) ? (b = 2) : (c = 3) ? (d = 4) : (e = 5);


> (test (< (= a 5) 5))
var a;
\
(a = 5) < 5;

> (test (< 1 a 3))
1 < a && a < 3;

> (test (< 1 2 3 4 5 6))
1 < 2 && 2 < 3 && 3 < 4 && 4 < 5 && 5 < 6;

> (test (if (< a 5) (= b 3) c))
var b;
\
a < 5 ? (b = 3) : c;

> (test (< (= a 1) (= b 2) (= c 3)))
var a, b, c;
\
(a = 1) < (b = 2) && (b = 2) < (c = 3);


> (test (> 1 a 3 b))
1 > a && a > 3 && 3 > b;

> (test (<= 1 a 3 b))
1 <= a && a <= 3 && 3 <= b;

> (test (>= 1 a 3 b))
1 >= a && a >= 3 && 3 >= b;


> (test (is a 1 b 2))
a === 1 && 1 === b && b === 2;

> (test (isnt a 1 b 2))
a !== 1 && 1 !== b && b !== 2;


> (test (mod 10 3))
10 % 3;

> (test (mod 10.5 3))
10.5 % 3;

> (test (mod a 1 b 2))
a % 1 % b % 2;

> (test (mod (= a 1) (+ a b) (= c 2)))
var a, c;
\
(a = 1) % (a + b) % (c = 2);

> (test (mod (= a 5) (+ a 10)))
var a;
\
(a = 5) % (a + 10);

> (test (* 2 (mod 10 3) (/ 5 4)))
2 * (10 % 3) * (5 / 4);

> (test (+ 2 (mod 10 3) (/ 5 4)))
2 + 10 % 3 + 5 / 4;

> (test (mod (if a 5 2) b))
(a ? 5 : 2) % b;



> (test (++ a))
++a;

> (test (++ (+ a 5)))
++(a + 5);

> (test (++ (+ a 5) (+ b 2)))
a + 5 += b + 2;

> (test (++ a 1))
++a;

> (test (++ a 5))
a += 5;



> (test (-- a))
--a;

> (test (-- (+ a 5)))
--(a + 5);

> (test (-- (+ a 5) (+ b 2)))
a + 5 -= b + 2;

> (test (-- a 1))
--a;

> (test (-- a 5))
a -= 5;



> (test (= window!foo (fn (a) (+ a 50))))
window.foo = function (a) {
    return a + 50
};


> (test (def window!foo (a)
           (+ a 50)))
window.foo = function (a) {
    return a + 50
};


> (test (extend window!foo (a) (isa a 10)
           (+ a 20)))
(function (a) {
    var b = function (a) {
            return Object.prototype.toString.call(a) === 10
        },
        c,
        d = function (a) {
            return a + 20
        };
    return window.foo = function () {
        var e = Array.prototype.slice.call(arguments);
        return (c = b.apply(this, e)) ? d.apply(this, e) : a.apply(this, e)
    }
})(window.foo);


> (test (extend window!foo (a) (isa (orig x) it 10)
           (orig (+ a it))))
(function (a) {
    var b = function (b) {
            var c = Object.prototype.toString.call(a(x));
            return c === it || c === 10
        },
        c,
        d = function (b) {
            return a(b + c)
        };
    return window.foo = function () {
        var e = Array.prototype.slice.call(arguments);
        return (c = b.apply(this, e)) ? d.apply(this, e) : a.apply(this, e)
    }
})(window.foo);


> (test (fn ()
           (extend window!foo (a) (isa (orig x) it 10)
             (orig (+ a it)))))
function () {
    var a = window.foo,
        b = function (b) {
            var c = Object.prototype.toString.call(a(x));
            return c === it || c === 10
        },
        c,
        d = function (b) {
            return a(b + c)
        };
    return window.foo = function () {
        var e = Array.prototype.slice.call(arguments);
        return (c = b.apply(this, e)) ? d.apply(this, e) : a.apply(this, e)
    }
};


> (test (fn ()
           (extend window!foo (a) (isa (orig x) it 10)
             (orig (+ a it) test body))))
function () {
    var a = window.foo,
        b = function (b) {
            var c = Object.prototype.toString.call(a(x));
            return c === it || c === 10
        },
        c,
        d = function (b) {
            return a(b + c, test, body)
        };
    return window.foo = function () {
        var e = Array.prototype.slice.call(arguments);
        return (c = b.apply(this, e)) ? d.apply(this, e) : a.apply(this, e)
    }
};


> (test (fn ()
           (extend window!foo (a b) (isa (orig x) it 10)
             (orig (+ a b it) test body))))
function () {
    var a = window.foo,
        b = function (b, c) {
            var d = Object.prototype.toString.call(a(x));
            return d === it || d === 10
        },
        c,
        d = function (b, d) {
            return a(b + d + c, test, body)
        };
    return window.foo = function () {
        var e = Array.prototype.slice.call(arguments);
        return (c = b.apply(this, e)) ? d.apply(this, e) : a.apply(this, e)
    }
};



> (test (apply foo 1 2 3))
foo.apply(this, [1].concat(2, 3));

> (test (apply foo (+ 1 2) "foo" "bar" 4 5))
foo.apply(this, [1 + 2, "foo", "bar", 4].concat(5));

> (test (apply foo (+ 1 2) "foo" "bar" 4 [5 6 7]))
foo.apply(this, [1 + 2, "foo", "bar", 4].concat(5, 6, 7));

> (test (apply foo args))
foo.apply(this, args);

> (test ((fn () (+ a 50))!apply foo b))
(function () {
    return a + 50
}).apply(foo, b);

> (test (foo!apply bar a))
foo.apply(bar, a);



> (test (fn ()
          (let a 1
            (let b 2
              [a b]))))
function () {
    var a = 1,
        b = 2;
    return [a, b]
};


> (test (fn ()
          (let a 1
            (+ a 5)
            (let b 2
              [a b]))))
function () {
    var a = 1;
    a + 5;
    var b = 2;
    return [a, b]
};


> (test (fn ()
          (with (a 1
                 b 2)
            (with (c 3
                   d 4)
              [a b c d]))))
function () {
    var a = 1,
        b = 2,
        c = 3,
        d = 4;
    return [a, b, c, d]
};


> (test (fn ()
          (with (a 1
                 b 2)
            (with (c a
                   d 4)
              (foo [a b c d]))
            [a b c d])))
function () {
    var a = 1,
        b = 2,
        e = a,
        f = 4;
    foo([a, b, e, f]);
    return [a, b, c, d]
};


> (test (fn ()
          (with (a 1
                 b 2)
            (with (c 3
                   d 4)
              [a b c d])
            [a b c d])))
function () {
    var a = 1,
        b = 2,
        e = 3,
        f = 4;
    [a, b, e, f];
    return [a, b, c, d]
};


> (test (fn ()
          (with (a 1
                 b 2)
            (do a b c d e))))
function () {
    var a = 1,
        b = 2;
    a;
    b;
    c;
    d;
    return e
};


> (test (fn ()
          (with (a 1
                 b 2)
            (+ a 5)
            (with (c 3
                   d 4)
              [a b c d]))))
function () {
    var a = 1,
        b = 2;
    a + 5;
    var c = 3,
        d = 4;
    return [a, b, c, d]
};


> (test (fn ()
          (with (a 1
                 b 2)
            (with (c 3
                   d 4)
              (+ a 5)
              [a b c d]))))
function () {
    var a = 1,
        b = 2,
        c = 3,
        d = 4;
    a + 5;
    return [a, b, c, d]
};


> (test (obj))
{};

> (test {})
{};


> (test (foo (obj)))
foo({});


> (test (obj a 1
             b 2))
{
    "a": 1,
    "b": 2
};


> (test (obj a (+ a 1)
             b (+ b 2)))
{
    "a": a + 1,
    "b": b + 2
};


> (test (foo (obj a 1
                  b 2)))
foo({
    "a": 1,
    "b": 2
});


> (test (fn ()
          (obj a (+ a 1)
               b (+ b 2))))
function () {
    return {
        "a": a + 1,
        "b": b + 2
    }
};


> (test (fn ()
          (obj a (fn () (+ a 1))
               b (fn () (+ b 2)))))
function () {
    return {
        "a": function () {
            return a + 1
        },
        "b": function () {
            return b + 2
        }
    }
};


> (test (fn ()
          (foo (obj a (fn () (+ a 1))
                    b (fn () (+ b 2))))))
function () {
    return foo({
        "a": function () {
            return a + 1
        },
        "b": function () {
            return b + 2
        }
    })
};


> (w/mode minify
    (test (fn ()
            (foo (obj a (fn () (+ a 1))
                      b (fn () (+ b 2)))))))
function(){return foo({"a":function(){return a+1},"b":function(){return b+2}})};


> (test (obj a (obj a 5)
             b ["c" "d" "e"]
             c null))
{
    "a": {
        "a": 5
    },
    "b": ["c", "d", "e"],
    "c": null
};


> (test { a { a 5 }
          b ["c" "d" "e"]
          c null          })
{
    "a": {
        "a": 5
    },
    "b": ["c", "d", "e"],
    "c": null
};



> (test [a b c])
[a, b, c];


> (test [a (do b c d e) f g h (+ 10 5)])
[a, (b, c, d, e), f, g, h, 10 + 5];


> (test [(+ a 1)
         (+ b 2)
         (+ c 3)])
[a + 1, b + 2, c + 3];


> (test [(+ a 1)
         [(+ b 2)
          (+ c 3)]])
[a + 1, [b + 2, c + 3]];


> (test ([a b c]!forEach (^:foo _)))
[a, b, c].forEach(function (a) {
    return foo(a)
});



> (test (fn () (let a nil a)))
function () {
    var a;
    return a
};

> (test (fn () (= a nil) a))
var a;
\
function () {
    a = void 0;
    return a
};

> (test (= a nil))
var a;

> (test (= a))
var a;

> (test (assign a nil))
var a;

> (test (assign a))
var a;

> (test (assign a b c d e nil))
var a = b = c = d = e = void 0;


> (test (fn ()
          (let a (fn (a)
                   (+ a 10))
            a)))
function () {
    var a = function (a) {
        return a + 10
    };
    return a
};


> (test (fn ()
          (rfn a (a)
            (+ a 10))))
function () {
    var a;
    return a = function (a) {
        return a + 10
    }
};


> (test (fn ()
          (afn (a)
            (+ a 10))))
function () {
    var a;
    return a = function (a) {
        return a + 10
    }
};


> (test (fn ()
          (afn (a)
            (self (+ a 10)))))
function () {
    var a;
    return a = function (b) {
        return a(b + 10)
    }
};



> (mangle-name "505__foo-b^ar$%nou500__9001")
_505__foo_b_ar$_nou500__9001

> (mangle-name "505__foo-b^ar$%%%%nou500__9001")
_505__foo_b_ar$____nou500__9001

> (mangle-name "a505")
a505

> (mangle-name "$505__foo-b^ar$%nou500__9001")
$505__foo_b_ar$_nou500__9001

> (mangle-name "_505__foo-b^ar$%nou500__9001")
_505__foo_b_ar$_nou500__9001

> (mangle-name "void 0")
void_0



> (test (do (fn ()
              (let a 5 a))
            (fn ()
              (let a 5 a))))
function () {
    var a = 5;
    return a
};
\
function () {
    var a = 5;
    return a
};


> (test (do (fn ()
              (let a 5 a))
            (fn ()
              (let b 4 b))))
function () {
    var a = 5;
    return a
};
\
function () {
    var a = 4;
    return a
};


> (test (fn ()
          (let a 5
            (+ a 5)
            (let a a a))))
function () {
    var a = 5;
    a + 5;
    var b = a;
    return b
};


> (test (fn ()
          (let a 5
            (fn ()
              (let a a a)))))
function () {
    var a = 5;
    return function () {
        var b = a;
        return b
    }
};



> (test (do (let a 5 a)
            (fn ()
              (let a 5 a
                (fn ()
                  (let a a a))))))
(function (a) {
    a;
    return function () {
        var a = 5;
        a;
        return function () {
            var b = a;
            return b
        }
    }
})(5);


> (test (do (let a 5 a)
            (prn a)
            (fn ()
              (let a 5 a
                (fn ()
                  (let a a a))))))
(function (b) {
    b;
    console.log(a);
    return function () {
        var a = 5;
        a;
        return function () {
            var b = a;
            return b
        }
    }
})(5);


> (test (do (let a 5 a)
            (prn a)
            (let a 10 a)
            (let a 15 a)))
(function (b, c, d) {
    b;
    console.log(a);
    c = 10;
    c;
    d = 15;
    return d
})(5);


> (test (do (let a 5 a)
            (fn ()
              (let a a
                (fn ()
                  (let a a a))))))
(function (b) {
    b;
    return function () {
        var b = a;
        return function () {
            var a = b;
            return a
        }
    }
})(5);


> (test (fn ()
          (let a a
            (fn ()
              (let b a
                (+ b a))))))
function () {
    var b = a;
    return function () {
        var a = b;
        return a + b
    }
};


> (w/uniq a
    (eval `(test (do (= ,a "foo")
                     (fn ()
                       (let a ,a a))))))

var __g1;
\
__g1 = "foo", function () {
    var __g2 = __g1;
    return __g2
};



> (test (or= a 5))
var a;
\
a || (a = 5);


> (test (fn (a)
          (or= a 5)))
function (a) {
    return a || (a = 5)
};


> (test (or= (foo 'a) 5))
foo.a || (foo.a = 5);


> (test (fn (a)
          (or= (foo 'a) 5)))
function (a) {
    return foo.a || (foo.a = 5)
};



> (test (fn (a)
          ((fn args
             (str args))!apply foo 1 2 3 a)))
function (a) {
    return (function () {
        var a = Array.prototype.slice.call(arguments);
        return "" + a
    }).apply(foo, 1, 2, 3, a)
};



> (test (if a (do b c d) (do e f g)))
a ? (b, c, d) : (e, f, g);

> (test (if (do a b c) e (do e f g)))
(a, b, c) ? e : (e, f, g);

> (test (if (do a b c) e (do e f g)))
(a, b, c) ? e : (e, f, g);


> (test (do (do (do (do a b c)))))
a;
\
b;
\
c;

> (test (do (do (do (do a b c) (do e f g)))))
a;
\
b;
\
c;
\
e;
\
f;
\
g;



> (test (new foobar))
new foobar;

> (test (new (foobar 0 1 2 3 4 5)))
new foobar(0, 1, 2, 3, 4, 5);

> (test (new (foobar (+ 0 1) (- 2 3) (* 4 5))))
new foobar(0 + 1, 2 - 3, 4 * 5);

> (test (new (+ "foo" "bar")))
new ("foo" + "bar");

> (test (new foo!bar))
new foo.bar;

> (test (new foo!in))
new foo.in;

> (test (new (foo (+ 0 1) (do a b c) d e f (* a f g) (new (foo)))))
new foo(0 + 1, (a, b, c), d, e, f, a * f * g, new foo());



> (test (fn ()
          (let a 5
            (= a 10)
            (= a 15))))
function () {
    var a = 5;
    a = 10;
    return a = 15
};


> (test (fn ()
          (let a 5
            (= a 10))
          (= a 15)))
var a;
\
function () {
    var b = 5;
    b = 10;
    return a = 15
};


> (test (fn ()
          (let a 5)
          (= a 15)))
var a;
\
function () {
    var b = 5;
    return a = 15
};


> (test (fn ()
          (let a 5
            (fn ()
              (= a 6)))))
function () {
    var a = 5;
    return function () {
        return a = 6
    }
};


> (test (fn ()
          (let a 5
            (= a 10))
          (fn (a)
            (= a 15))))
function () {
    var a = 5;
    a = 10;
    return function (a) {
        return a = 15
    }
};


> (test (fn ()
          (= a 10)
          (fn (a)
            (= a 15))))
var a;
\
function () {
    a = 10;
    return function (a) {
        return a = 15
    }
};


> (test (fn ()
          (let a 5
            (= a 10))
          (fn (b)
            (= a 15)
            (= b 20))))
var a;
\
function () {
    var b = 5;
    b = 10;
    return function (b) {
        a = 15;
        return b = 20
    }
};



> (test (or a))
a;

> (test (foo 'a))
foo("a");

> (test (foo 'a 5))
foo("a", 5);

> (test (ref foo 'a))
foo.a;

> (test (ref foo 'a 5))
foo.a || 5;

> (test (if (ref foo a 5) 20 30))
foo[a] || 5 ? 20 : 30;

> (test (and (ref foo (bar a) 5) 20 30))
(foo[bar(a)] || 5) && 20 && 30;

> (test (fn ()
          (and (ref foo (bar a) 5)
               20
               30)))
function () {
    return (foo[bar(a)] || 5) && 20 && 30
};


> (test (if a))
a;

> (test (if a b))
a && b;

> (test (if a b c))
a ? b : c;

> (test (if a b c d))
a ? b : c && d;


> (test (if a b (is c nil) (< d 5)))
a ? b : c === void 0 && d < 5;

> (test (if a b (and (is c nil) (< d 5))))
a ? b : c === void 0 && d < 5;


> (test (if a b (or c nil) (< d 5)))
a ? b : (c || void 0) && d < 5;

> (test (if a b (and (or c nil) (< d 5))))
a ? b : (c || void 0) && d < 5;


> (test (if a b (= c nil) (< d 5)))
var c;
\
a ? b : (c = void 0) && d < 5;

> (test (if a b (and (= c nil) (< d 5))))
var c;
\
a ? b : (c = void 0) && d < 5;


> (test (if a b c d e))
a ? b : c ? d : e;


> (test (is nil))
void 0;


> (test (and (= c nil) (< d 5)))
var c;
\
(c = void 0) && d < 5;


> (test (and (or a b) (or c d)))
(a || b) && (c || d);

> (test (or (and a b) (and c d)))
a && b || c && d;



> (test (len x))
x.length;

> (test (len "foobar"))
"foobar".length;

> (test (len (foo "foobar")))
foo("foobar").length;

> (test (len (+ "foo" "bar")))
("foo" + "bar").length;

> (test (len (+ 15 10)))
(15 + 10).length;

> (test (len (fn () nil)))
(function () {}).length;

> (test (len [1 2 3 4 5]))
[1, 2, 3, 4, 5].length;

> (test (len (new foo)))
(new foo).length;

> (test (new (len foo)))
new foo.length;



> (test (while t
          (prn x)))
while (true) {
    console.log(x)
}


> (test (while true
          (prn x)))
while (true) {
    console.log(x)
}



> (test (for i 0 (len x)))
(function (a) {
    while (a < x.length) {
        ++a
    }
})(0);


> (test (if a
          (for i 0 (len x))))
a && (function (a) {
    while (a < x.length) {
         ++a
    }
})(0);


> (test (for i 0 (len x)
          (prn:ref x i)))
(function (a) {
    while (a < x.length) {
        console.log(x[a]);
        ++a
    }
})(0);


> (test (for i 0 (len x)
          (let x i x)))
(function (a) {
    var b;
    while (a < x.length) {
        b = a;
        b;
        ++a
    }
})(0);



> (test (for i 0 (len x)
          (let x i
            (fn ()))))
(function (a) {
    var b;
    while (a < x.length) {
        b = a;
        function () {};
        ++a
    }
})(0);


> (test (for i 0 (len x)
          (let x i
            (fn () i))))
(function (a) {
    var b;
    while (a < x.length) {
        (function (a) {
            b = a;
            return function () {
                return a
            }
        })(a);
        ++a
    }
})(0);


> (test (for i 0 (len x)
          (let x i
            (fn () x))))
(function (a) {
    var b;
    while (a < x.length) {
        (function (a) {
            b = a;
            return function () {
                return b
            }
        })(a);
        ++a
    }
})(0);


> (test (for i 0 (len x)
          (prn i)))
(function (a) {
    while (a < x.length) {
        console.log(a);
        ++a
    }
})(0);


> (test (for i 0 (len x)
          (foo i)
          (prn i)))
(function (a) {
    while (a < x.length) {
        foo(a);
        console.log(a);
        ++a
    }
})(0);


> (test (fn ()
          (for i 0 (len x))))
function () {
    var a = 0;
    while (a < x.length) {
        ++a
    }
};


> (test (fn ()
          (for i 0 (len a))))
function () {
    var b = 0;
    while (b < a.length) {
        ++b
    }
};


> (test (fn ()
          (for i 0 (len x)
            (prn:ref x i))))
function () {
    var a = 0;
    while (a < x.length) {
        console.log(x[a]);
        ++a
    }
};


> (test (fn ()
          (for i 0 (len x)
            (prn i))))
function () {
    var a = 0;
    while (a < x.length) {
        console.log(a);
        ++a
    }
};


> (test (fn ()
          (for i 0 (len x)
            (foo i)
            (prn i))))
function () {
    var a = 0;
    while (a < x.length) {
        foo(a);
        console.log(a);
        ++a
    }
};


> (test (each x [1 2 3]
          (prn x)))
(function (a) {
    var b = a.length,
        c = 0,
        d;
    while (c < b) {
        d = a[c];
        console.log(d);
        ++c
    }
})([1, 2, 3]);


> (test (each x l
          (prn x)))
(function (a) {
    var b = 0,
        c;
    while (b < a) {
        c = l[b];
        console.log(c);
        ++b
    }
})(l.length);


> (test (fn ()
          (each x l
            (prn x))))
function () {
    var a = l.length,
        b = 0,
        c;
    while (b < a) {
        c = l[b];
        console.log(c);
        ++b
    }
};


> (test (fn ()
          (each x [1 2 3]
            (prn x))))
function () {
    var a = [1, 2, 3],
        b = a.length,
        c = 0,
        d;
    while (c < b) {
        d = a[c];
        console.log(d);
        ++c
    }
};


> (test (fn ()
          (each x '(1 2 3)
            (prn x))))
function () {
    var a = [1, 2, 3],
        b = a.length,
        c = 0,
        d;
    while (c < b) {
        d = a[c];
        console.log(d);
        ++c
    }
};



> (test (2!toString))
2..toString();

> (test (2.!toString))
2.0.toString();

> (test (2.5!toString))
2.5.toString();



> (test foo!bar)
foo.bar;

> (test foo!bar-qux)
foo["bar-qux"];

> (test foo!bar-qux!corge)
foo["bar-qux"].corge;

> (test foo!bar-qux!corge!nou%)
foo["bar-qux"].corge["nou%"];

> (test (ref foo bar 5))
foo[bar] || 5;

> (test (ref foo bar-qux 5))
foo[bar_qux] || 5;

> (test (ref foo 'bar 5))
foo.bar || 5;

> (test (ref foo 'bar-qux 5))
foo["bar-qux"] || 5;



> (test foo.bar)
foo(bar);


> (test (foo.bar nou:qux))
foo(bar)(function () {
    var a = Array.prototype.slice.call(arguments);
    return nou(qux.apply(this, a))
});

> (test (foo!bar nou:qux))
foo.bar(function () {
    var a = Array.prototype.slice.call(arguments);
    return nou(qux.apply(this, a))
});

> (test ((ref foo 'bar) nou:qux))
foo.bar(function () {
    var a = Array.prototype.slice.call(arguments);
    return nou(qux.apply(this, a))
});

> (test (foo!bar-qux nou:qux))
foo["bar-qux"](function () {
    var a = Array.prototype.slice.call(arguments);
    return nou(qux.apply(this, a))
});


> (test foo!bar.qux)
foo.bar(qux)

> (test (ref foo "bar.qux"))
foo["bar.qux"];

> (test (foo:bar cdr.qux corge))
foo(bar(cdr(qux), corge));

(test ~foo)
u

> (test (~foo bar qux))
!foo(bar, qux);

> (test (foo ~bar qux))
foo(function () {
    var a = Array.prototype.slice.call(arguments);
    return !bar.apply(this, a)
}, qux);



> (test (ref "foo" 0))
"foo"[0];

> (test (ref (ref "foo" 0) 'toString))
"foo"[0].toString;


> (test ("foo"!0))
"foo"[0]();

> (test ("foo"!0!toString))
"foo"[0].toString();



> (test (fn ()
          (let a a
            [a b])))
function () {
    var c = a;
    return [c, b]
};


> (test (fn ()
          (let a 5
            [a b])))
function () {
    var a = 5;
    return [a, b]
};


> (test (fn ()
          (withs (a a
                  b a
                  c c)
            [a b c])))
function () {
    var b = a,
        d = b,
        e = c;
    return [b, d, e]
};


> (w/shorten? nil
    (test (fn ()
            (withs (a a
                    b a
                    c c)
              [a b c]))))
function () {
    var __g1 = a,
        __g2 = __g1,
        __g3 = c;
    return [__g1, __g2, __g3]
};


> (test (fn ()
          (withs (b a
                  d b
                  e c)
            [b d e])))
function () {
    var b = a,
        d = b,
        e = c;
    return [b, d, e]
};



> (test (arc:compiler-mac foobar (x) (+ x 20)))
\

> (test (foobar 10))
30;

> (test (mac foobar (x) (+ x 50)))
\

> (test (foobar 10))
60;

> (test (arc:compiler-mac foobar (x) (+ x 50)))
\

> (test (foobar 10))
60;



> (test 'foo)
"foo";

> (test (quote nil))
void 0;

> (test (quote foo))
"foo";

> (test (quote "foo"))
"foo";

> (test '(1 2 3 4 5 6))
[1, 2, 3, 4, 5, 6];

> (test '(fn () (+ 1 2 3 4 5 6)))
["fn", void 0, ["+", 1, 2, 3, 4, 5, 6]];

> (test '(a b c d e f))
["a", "b", "c", "d", "e", "f"];

> (test '(a b c d e f (g h i (j k)) l m n o p))
["a", "b", "c", "d", "e", "f", ["g", "h", "i", ["j", "k"]], "l", "m", "n", "o", "p"];



> (test `a)
"a";


> (test (let a 10 `a))
(function (a) {
    return "a"
})(10);


> (test (let a 10 `,a))
(function (a) {
    return a
})(10);


> (test (let a 10 `',a))
(function (a) {
    return ["quote"].concat(a)
})(10);

> (test (let a 10 `(foobar ,a)))
(function (a) {
    return ["foobar"].concat(a)
})(10);


> (test `(a b c d e))
["a"].concat("b", "c", "d", "e");


> (test (let d 20 `(a b c ,d e)))
(function (a) {
    return ["a"].concat("b", "c", a, "e")
})(20);


> (test (let d '(1 2 3 4 5)
          (let g 20
            `(a b c ,@d e f ,g))))
(function (a) {
    var b = 20;
    return ["a"].concat("b", "c", a, "e", "f", b)
})([1, 2, 3, 4, 5]);


> (test (let d '(1 2 3 4 5)
          (let g 20
            `(a b c ,@d `(e f ,,g)))))
(function (a) {
    var b = 20;
    return ["a"].concat("b", "c", a, [["join"].concat([["quote"].concat([["e"].concat()])], [["join"].concat([["quote"].concat([["f"].concat()])], [["join"].concat([["list"].concat(b)], [["quote"].concat(void 0)])])])])
})([1, 2, 3, 4, 5]);


> (test (join 'a 'b 'c 'd))
error: cannot join {quote a . nil}


> (test (join '(a) '(b) '(c) '(d)))
["a"].concat("b", "c", "d");

> (test (join '(a) '(b c d) '(e f g (h i j) k l) '(m n)))
["a"].concat("b", "c", "d", ["e", "f", "g", ["h", "i", "j"], "k", "l"], "m", "n");

> (test (join '(a) '(b c d) '(e f g (h i j) k l) nil))
["a"].concat("b", "c", "d", ["e", "f", "g", ["h", "i", "j"], "k", "l"]);

> (test (join '(a) '(b c d) '(e f g (h i j) k l)))
["a"].concat("b", "c", "d", ["e", "f", "g", ["h", "i", "j"], "k", "l"]);


> (test (join '(a) '(b) '(c) 'd))
error: cannot join {quote d . nil}


> (test (join '(a) (join '(b) (join '(c) (join '(d) 'nil)))))
["a"].concat("b", "c", "d");

> (test (join '(a) (join '(b) (join nil (join 'nil (join '(d) 'nil))))))
["a"].concat("b", "d");

> (test (join '(a) '(b) nil 'nil '(d) 'nil))
["a"].concat("b", "d");


> (test (join nil nil))
[].concat();


> (test (let a '(1 2 3)
          (join nil a)))
(function (a) {
    return a.concat()
})([1, 2, 3]);


> (test (let a '(1 2 3)
          (join a nil)))
(function (a) {
    return a.concat()
})([1, 2, 3]);


> (test (join nil a b c '(d e f (g h i))))
a.concat(b, c, ["d", "e", "f", ["g", "h", "i"]]);

> (test (join nil '(a b c) '(d e f (g h i))))
["a"].concat("b", "c", ["d", "e", "f", ["g", "h", "i"]]);


> (test (let b '(10)
          (join '(a) b '(c) '(d))))
(function (a) {
    return ["a"].concat(a, "c", "d")
})([10]);


> (test (let a '(10)
          (join '(a) a '(c) '(d))))
(function (a) {
    return ["a"].concat(a, "c", "d")
})([10]);


> (test (let b '(10)
          (join '(a) b a '(c) '(d))))
(function (b) {
    return ["a"].concat(b, a, "c", "d")
})([10]);


> (test (join a b [c d e]))
a.concat(b, c, d, e);

> (test (join a b [c [d e]]))
a.concat(b, [c, [d, e]]);

> (test (with (a '(1 2 3)
               b '(4 5 6)
               c '(7 8 9))
          (join a b [c (join '(d e) '(f g))])))
(function (a, b, c) {
    return a.concat(b, [c, ["d"].concat("e", "f", "g")])
})([1, 2, 3], [4, 5, 6], [7, 8, 9]);


> (test (join a b [c (join 'd 'e)]))
error: cannot join {quote d . nil}


> (test (join '(a b) ['c 'd 'e]))
["a"].concat("b", "c", "d", "e");

> (test (join '(a b) ['(c d) 'e]))
["a"].concat("b", [["c", "d"], "e"]);

> (test (join '(a b) ['c ['d 'e]]))
["a"].concat("b", ["c", ["d", "e"]]);


> (test (join (join nil nil) '(a b c d e f g)))
["a"].concat("b", "c", "d", "e", "f", "g");

> (test (join (join '(a b c) '(d e f)) '(a b c d e f g)))
["a"].concat("b", "c", "d", "e", "f", "a", "b", "c", "d", "e", "f", "g");

> (test (join (join '(a b c) '((d e f))) '(a b c d e f g)))
["a"].concat("b", "c", [["d", "e", "f"]], "a", "b", "c", "d", "e", "f", "g");

> (test (join (foo 'bar) '(1 2 3 4 5)))
foo("bar").concat(1, 2, 3, 4, 5);



> (test (list* 1 2 3 4 5))
[1].concat(2, 3, 4, 5);

> (test (list* 1 2 3 4 5 a))
[1].concat(2, 3, 4, 5, a);

> (test (list* 1 2 3 4 5 '(6 7 8 9)))
[1].concat(2, 3, 4, 5, 6, 7, 8, 9);

> (test (list* 1 2 3 4 5 '(6 7 8 9) '(10 11 12 13)))
[1, 2, 3, 4, 5, [6, 7, 8, 9]].concat(10, 11, 12, 13);

> (test (list* 1 2 3 4 5 '(6 7 (8 9)) '(10 (11 12) 13)))
[1, 2, 3, 4, 5, [6, 7, [8, 9]]].concat([10, [11, 12], 13]);

> (test (list* '(1 2 3 4 5) a))
[[1, 2, 3, 4, 5]].concat(a);

> (test (list* '(1 2 3 4 5) 6 7 8 9 10 a))
[[1, 2, 3, 4, 5], 6, 7, 8, 9, 10].concat(a);

> (test (list* '(1 2 3 4 5) a nil))
[[1, 2, 3, 4, 5], a].concat();

> (test (list* '(1 2 3 4 5) nil nil a nil))
[[1, 2, 3, 4, 5], void 0, void 0, a].concat();

> (test (list* '(1 2 3 4 5) '(6 7 8 9 10) nil nil a nil))
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], void 0, void 0, a].concat();

> (test (list* '(1 2 3 4 5) '(6 7 8 9 10) nil nil a))
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], void 0, void 0].concat(a);



> (test (do a))
a;


> (w/optimize? nil (test (do a)))
a;


> (w/optimize? nil (test (do a b c d)))
(function () {
    a;
    b;
    c;
    return d
})();


> (test (if (do a) (do b) (do c)))
a ? b : c;


> (test (if (do (= a 5)) (do (= b 5)) (do (= c 5))))
var a, b, c;
\
(a = 5) ? (b = 5) : (c = 5);



> (test (on-err (fn ()
                  (prn c))
                (fn ()
                  (+ a 5)
                  (/ 1 0))))
try {
    a + 5;
    1 / 0
} catch () {
    console.log(c)
}


> (test (on-err (fn (a b c)
                  (prn c))
                (fn ()
                  (+ a 5)
                  (/ 1 0))))
try {
    a + 5;
    1 / 0
} catch (a, b, c) {
    console.log(c)
}


> (test (on-err (fn (c)
                  (prn c))
                (fn ()
                  (+ a 5)
                  (/ 1 0))))
try {
    a + 5;
    1 / 0
} catch (c) {
    console.log(c)
}


> (test (on-err (fn (c)
                  (prn c))
                (fn ()
                  (+ a 5)
                  (err "foo"))))
try {
    a + 5;
    throw "foo"
} catch (c) {
    console.log(c)
}


> (test (on-err (fn (c)
                  (prn c))
                (fn (a b c x y)
                  (+ a 5)
                  (/ 1 0))))
try {
    a + 5;
    1 / 0
} catch (c) {
    console.log(c)
}


> (test (on-err (fn (c)
                  (prn c)
                  "bar")
                (fn (a b c x y)
                  (+ a 5)
                  (/ 1 0))))
try {
    a + 5;
    1 / 0
} catch (c) {
    console.log(c);
    "bar"
}


> (test (fn ()
          (on-err (fn (c)
                    (prn c)
                    "bar")
                  (fn (a b c x y)
                    (+ a 5)
                    (/ 1 0)))))
function () {
    try {
        a + 5;
        return 1 / 0
    } catch (c) {
        console.log(c);
        return "bar"
    }
};


> (test (fn ()
          (on-err (fn (c)
                    (prn c))
                  (fn ()
                    (+ a 5)
                    (err "foo")))))
function () {
    try {
        a + 5;
        throw "foo"
    } catch (c) {
        return console.log(c)
    }
};


> (test (fn ()
          (on-err (fn (c)
                    (prn c))
                  (fn ()
                    (+ a 5)
                    (/ 1 0)))))
function () {
    try {
        a + 5;
        return 1 / 0
    } catch (c) {
        return console.log(c)
    }
};


> (test (fn ()
          (on-err (fn (c)
                    (prn c))
                  (fn ()
                    (+ a 5)
                    (/ 1 0)))
          (+ 10 5)))
function () {
    try {
        a + 5;
        1 / 0
    } catch (c) {
        console.log(c)
    }
    return 10 + 5
};


> (test (if a
          (on-err (fn (c)
                    (prn c))
                  (fn ()
                    (+ a 5)
                    (/ 1 0)))))
a && (function () {
    try {
        a + 5;
        return 1 / 0
    } catch (c) {
        return console.log(c)
    }
})();



> (test (arc:def fn-iferr (trial then else)
          (let (had-err val) (on-err (^:list 't _)
                                     (^:list nil (trial)))
            (.val:if had-err then else))))


> (test (mac aiferr (x y . body)
          `(fn-iferr (fn ()   ,x)
                     (fn (it) ,y)
                     (fn (it) ,@body))))


;> (test (mac aiferr (x y . body)
          `(let it (on-err (fn (it) ,y)
                           (fn ()   ,x))
             ,@body)))
u


> (test (aiferr (err "foo")
          (prn it)
          (prn it)))
u



> (test (type (obj a b c d)))
Object.prototype.toString.call({
    "a": b,
    "c": d
});

> (test (type x))
Object.prototype.toString.call(x);

> (test (type 5))
Object.prototype.toString.call(5);

> (test (type (fn (a) (+ a 5))))
Object.prototype.toString.call(function (a) {
    return a + 5
});


> (test (isa x 'cons))
Object.prototype.toString.call(x) === "[object Array]";

> (test (cons? x))
Object.prototype.toString.call(x) === "[object Array]";

> (test (isa x 'fn))
Object.prototype.toString.call(x) === "[object Function]";

> (test (fn? x))
Object.prototype.toString.call(x) === "[object Function]";

> (test (isa x 'sym))
Object.prototype.toString.call(x) === "[object String]";

> (test (sym? x))
Object.prototype.toString.call(x) === "[object String]";

> (test (isa x 'foo))
Object.prototype.toString.call(x) === "foo";

> (test (isa x "[object HTMLBodyElement]"))
Object.prototype.toString.call(x) === "[object HTMLBodyElement]";

> (test (isa x 'cons 'table))
(function (a) {
    return a === "[object Array]" || a === "[object Object]"
})(Object.prototype.toString.call(x));

> (test (isa x "foo" 'cons 'table "[object HTMLElement]"))
(function (a) {
    return a === "foo" || a === "[object Array]" || a === "[object Object]" || a === "[object HTMLElement]"
})(Object.prototype.toString.call(x));

> (test (fn ()
          (isa x "foo" 'cons 'table "[object HTMLElement]")))
function () {
    var a = Object.prototype.toString.call(x);
    return a === "foo" || a === "[object Array]" || a === "[object Object]" || a === "[object HTMLElement]"
};



> (test (let urls (obj)))
(function (a) {})({});


> (test (let urls (obj)
          (send-request (obj) (info)
            (= urls info!urls))))
(function (a) {
    return send_request({}, info(), a = info.urls)
})({});


> (test (use dom chrome))

> (test (let urls {}
          (send-request {} (info)
            (= urls info!urls))
\
          (on DOMContentLoaded ()
            (each x (css "span.thumb > a[href]")
              (style x
                display        "-webkit-box"
                webkitBoxAlign "center"
                webkitBoxPack  "center")
\
              (= x x!firstElementChild)
\
              (if (ref urls x!href)
                (style x!firstElementChild
                  width    "10px !important"
                  height   "10px !important"
                  border   "5px solid grey !important"
                  cssFloat "left !important"))))))
(function (a) {
    chrome.extension.sendRequest({}, function (b) {
        return a = b.urls
    });
    return addEventListener("DOMContentLoaded", function () {
        var b = document.querySelectorAll("span.thumb > a[href]"),
            c = b.length,
            d = 0,
            e,
            f;
        while (d < c) {
            e = b[d];
            e.style.display = "-webkit-box";
            e.style.webkitBoxAlign = "center";
            e.style.webkitBoxPack = "center";
            e = e.firstElementChild;
            a[e.href] && (f = e.firstElementChild.style, f.width = "10px !important", f.height = "10px !important", f.border = "5px solid grey !important", f.cssFloat = "left !important");
            ++d
        }
    }, false)
})({});



> (test (= (ref foo bar) "qux"))
foo[bar] = "qux";

> (test (= (ref foo 'bar) "qux"))
foo.bar = "qux";

> (test (= (ref foo 'bar.qux) "qux"))
foo["bar.qux"] = "qux";

> (test (= (ref foo 'bar-qux) "qux"))
foo["bar-qux"] = "qux";


> (test (= a 'b
           c 'd
           e 'f))
var a = "b";
\
var c = "d";
\
var e = "f";


> (test (= a 'b c 'd e))
var a = "b";
\
var c = "d";
\
var e;


> (test (= a))
var a;



> (test (= foo!bar qux))
foo.bar = qux;

> (test (= (foo 'bar) qux))
foo.bar = qux;


> (test (= foo!bar-qux corge))
foo["bar-qux"] = corge;

> (test (= (foo 'bar-qux) corge))
foo["bar-qux"] = corge;


> (test (= 1!toString (fn ())))
1..toString = function () {};

> (test (= (1 'toString) (fn ())))
1..toString = function () {};


> (test (= 1!foo-bar (fn ())))
1["foo-bar"] = function () {};

> (test (= (1 'foo-bar) (fn ())))
1["foo-bar"] = function () {};


> (test (= foo!bar!qux corge))
foo.bar.qux = corge;

> (test (= ((foo 'bar) 'qux) corge))
foo.bar.qux = corge;


> (test (= foo!bar-qux!qux-corge foobar))
foo["bar-qux"]["qux-corge"] = foobar;

> (test (= ((foo 'bar-qux) 'qux-corge) foobar))
foo["bar-qux"]["qux-corge"] = foobar;


> (test (= (ref (ref foo 'bar) 'qux) corge))
foo["bar-qux"]["qux-corge"] = foobar;u

> (test (= (ref (ref foo 'bar-qux) 'qux-corge) foobar))
foo["bar-qux"]["qux-corge"] = foobar;u


> (test (foo bar)!qux)
foo(bar)[qux];u

> (test (ref (foo bar) qux))
foo(bar)[qux];

> (test (ref (foo (bar qux)) corge))
foo(bar(qux))[corge];


> (test (sref (foo 'bar) corge 'qux))
foo.bar.qux = corge;



> (test (for i 0 (len x)
          (do a b c d)))
(function (e) {
    while (e < x.length) {
        a;
        b;
        c;
        d;
        ++e
    }
})(0);


> (test (for i 0 (len x)
          (let a (+ i 10)
            b
            c
            d
            (foo:fn () a))))
(function (a) {
    while (a < x.length) {
        (function (a) {
            var e = a + 10;
            b;
            c;
            d;
            return foo(function () {
                return e
            })
        })(a);
        ++a
    }
})(0);


> (test (for i 0 (len x)
          (let a (+ i 10)
            (/ i 5)
            (foo:fn () a))))
(function (a) {
    while (a < x.length) {
        (function (a) {
            var b = a + 10;
            a / 5;
            return foo(function () {
                return b
            })
        })(a);
        ++a
    }
})(0);


> (test (foo (do a b c d)))
foo((a, b, c, d));



> (test (w/div x test "yes"
          (div foo "bar"
            (div qux "corge")
            (div corge (+ (x!getAttribute "test") "no")))))
(function (a) {
    a.setAttribute("test", "yes");
    var b = document.createElement("div"),
        c,
        d;
    b.setAttribute("foo", "bar");
    c = document.createElement("div");
    c.setAttribute("qux", "corge");
    b.appendChild(c);
    d = document.createElement("div");
    d.setAttribute("corge", a.getAttribute("test") + "no");
    b.appendChild(d);
    a.appendChild(b);
    return a
})(document.createElement("div"));


> (test (fn ()
          (w/div x test "yes"
            (div foo "bar"
              (div qux "corge")
              (div corge (+ (x!getAttribute "test") "no"))))))
function () {
    var a = document.createElement("div");
    a.setAttribute("test", "yes");
    var b = document.createElement("div"),
        c,
        d;
    b.setAttribute("foo", "bar");
    c = document.createElement("div");
    c.setAttribute("qux", "corge");
    b.appendChild(c);
    d = document.createElement("div");
    d.setAttribute("corge", a.getAttribute("test") + "no");
    b.appendChild(d);
    a.appendChild(b);
    return a
};


> (w/optimize? nil
    (test (fn ()
            (w/div x test "yes"
              (div foo "bar"
                (div qux "corge")
                (div corge (+ (x!getAttribute "test") "no")))))))
function () {
    return (function (a) {
        a.setAttribute("test", "yes");
        a.appendChild((function (b) {
            b.setAttribute("foo", "bar");
            b.appendChild((function (a) {
                a.setAttribute("qux", "corge");
                return a
            })(document.createElement("div")));
            b.appendChild((function (b) {
                b.setAttribute("corge", a.getAttribute("test") + "no");
                return b
            })(document.createElement("div")));
            return b
        })(document.createElement("div")));
        return a
    })(document.createElement("div"))
};


> (test (w/div x test "yes"
          (div foo "bar"
            (div qux "corge")
            (div corge (+ (x!getAttribute "test") "no")))))
(function (a) {
    a.setAttribute("test", "yes");
    var b = document.createElement("div"),
        c,
        d;
    b.setAttribute("foo", "bar");
    c = document.createElement("div");
    c.setAttribute("qux", "corge");
    b.appendChild(c);
    d = document.createElement("div");
    d.setAttribute("corge", a.getAttribute("test") + "no");
    b.appendChild(d);
    a.appendChild(b);
    return a
})(document.createElement("div"));


> (test (let x (document!createElement "div")
          (x!setAttribute "test" "yes")
          (x!appendChild
            (let self (document!createElement "div")
              (self!setAttribute "foo" "bar")
              (self!appendChild
                (let self (document!createElement "div")
                  (self!setAttribute "qux" "corge")
                  self))
              (self!appendChild
                (let self (document!createElement "div")
                  (self!setAttribute "corge" (+ (x!getAttribute "test") "no"))
                  self))
              self))
          x))
(function (a) {
    a.setAttribute("test", "yes");
    var b = document.createElement("div"),
        c,
        d;
    b.setAttribute("foo", "bar");
    c = document.createElement("div");
    c.setAttribute("qux", "corge");
    b.appendChild(c);
    d = document.createElement("div");
    d.setAttribute("corge", a.getAttribute("test") + "no");
    b.appendChild(d);
    a.appendChild(b);
    return a
})(document.createElement("div"));


> (test (append document!body
          (div style (height          50px
                      width           50px
                      backgroundColor black)
\
               on    (click (e)
                       (alert "foo")))
\
          (div style (height          50px
                      width           50px
                      backgroundColor green)
\
               on    (click (e)
                       (alert "bar")))))
(function (a) {
    var b = document.createElement("div");
    b.style.height = "50px";
    b.style.width = "50px";
    b.style.backgroundColor = "black";
    b.addEventListener("click", function (a) {
        return alert("foo")
    }, true);
    a.appendChild(b);
    var c = document.createElement("div");
    c.style.height = "50px";
    c.style.width = "50px";
    c.style.backgroundColor = "green";
    c.addEventListener("click", function (a) {
        return alert("bar")
    }, true);
    a.appendChild(c);
    return a
})(document.body);


> (test (append (div foo "bar")
          (div style (height          50px
                      width           50px
                      backgroundColor black)
\
               on    (click (e)
                       (alert "foo")))
\
          (div style (height          50px
                      width           50px
                      backgroundColor green)
\
               on    (click (e)
                       (alert "bar")))))
(function (a) {
    a.setAttribute("foo", "bar");
    var b,
        c;
    b = document.createElement("div");
    b.style.height = "50px";
    b.style.width = "50px";
    b.style.backgroundColor = "black";
    b.addEventListener("click", function (a) {
        return alert("foo")
    }, true);
    a.appendChild(b);
    c = document.createElement("div");
    c.style.height = "50px";
    c.style.width = "50px";
    c.style.backgroundColor = "green";
    c.addEventListener("click", function (a) {
        return alert("bar")
    }, true);
    a.appendChild(c);
    return a
})(document.createElement("div"));


> (test (fn ()
          (append (div foo "bar")
            (div style (height          50px
                        width           50px
                        backgroundColor black)
\
                 on    (click (e)
                         (alert "foo")))
\
            (div style (height          50px
                        width           50px
                        backgroundColor green)
\
                 on    (click (e)
                         (alert "bar"))))))
function () {
    var a = document.createElement("div");
    a.setAttribute("foo", "bar");
    var b,
        c;
    b = document.createElement("div");
    b.style.height = "50px";
    b.style.width = "50px";
    b.style.backgroundColor = "black";
    b.addEventListener("click", function (a) {
        return alert("foo")
    }, true);
    a.appendChild(b);
    c = document.createElement("div");
    c.style.height = "50px";
    c.style.width = "50px";
    c.style.backgroundColor = "green";
    c.addEventListener("click", function (a) {
        return alert("bar")
    }, true);
    a.appendChild(c);
    return a
};



> (test (let a 10
          (with (b (+ a 2)
                 c 10)
            (do a b c d)
            (let a a
              (let b 10
                (+ a b)))
            (let d 21
              (+ c 50))
            [a b])
          (+ a b)))
(function (a) {
    var c = a + 2,
        e = 10;
    a;
    c;
    e;
    d;
    var f = a,
        g = 10;
    f + g;
    var h = 21;
    e + 50;
    [a, c];
    return a + b
})(10);


> (w/optimize? nil
    (test (let a 10
            (with (b (+ a 2)
                   c 10)
              (do a b c d)
              (let a a
                (let b 10
                  (+ a b)))
              (let d 21
                (+ c 50))
              [a b])
            (+ a b))))
(function (a) {
    (function (b, c) {
        (function () {
            a;
            b;
            c;
            return d
        })();
        (function (a) {
            return (function (b) {
                return a + b
            })(10)
        })(a);
        (function (a) {
            return c + 50
        })(21);
        return [a, b]
    })(a + 2, 10);
    return a + b
})(10);



> (test (mac testfn ()
          `(fn (let) (list let 1 2 3))))
\


> (test (testfn))
function (a) {
    return [a, 1, 2, 3]
};


> (test (let + 10 +))
(function (a) {
    return a
})(10);


> (test (let each 10 each))
(function (a) {
    return a
})(10);


> (test (let mac 10 mac))
(function (a) {
    return a
})(10);


> (test (let use 10 use))
(function (a) {
    return a
})(10);


> (test (let let 10 let))
(function (a) {
    return a
})(10);


> (test (let foobar 10 foobar))
(function (a) {
    return a
})(10);


> (test (let testfn 10 testfn))
(function (a) {
    return a
})(10);



> (test (let foobar 10
          (with (b (+ foobar 2)
                 c 10)
            (do foobar b c d)
            (let foobar foobar
              (let b 10
                (+ foobar b)))
            (let d 21
              (+ c 50))
            [foobar b])
          (+ foobar b)))
(function (a) {
    var c = a + 2,
        e = 10;
    a;
    c;
    e;
    d;
    var f = a,
        g = 10;
    f + g;
    var h = 21;
    e + 50;
    [a, c];
    return a + b
})(10);


> (w/shorten? nil
    (test (let foobar 10
            (with (b (+ foobar 2)
                   c 10)
              (do foobar b c d)
              (let foobar foobar
                (let b 10
                  (+ foobar b)))
              (let d 21
                (+ c 50))
              [foobar b])
            (+ foobar b))))
(function (foobar) {
    var __g1 = foobar + 2,
        __g2 = 10;
    foobar;
    __g1;
    __g2;
    d;
    var __g3 = foobar,
        __g4 = 10;
    __g3 + __g4;
    var __g5 = 21;
    __g2 + 50;
    [foobar, __g1];
    return foobar + b
})(10);


> (w/optimize? nil
    (w/shorten? nil
      (test (let foobar 10
              (with (b (+ foobar 2)
                     c 10)
                (do foobar b c d)
                (let foobar foobar
                  (let b 10
                    (+ foobar b)))
                (let d 21
                  (+ c 50))
                [foobar b])
              (+ foobar b)))))
(function (foobar) {
    (function (b, c) {
        (function () {
            foobar;
            b;
            c;
            return d
        })();
        (function (foobar) {
            return (function (b) {
                return foobar + b
            })(10)
        })(foobar);
        (function (d) {
            return c + 50
        })(21);
        return [foobar, b]
    })(foobar + 2, 10);
    return foobar + b
})(10);



> (test (fn ()
          (fn ()
            (+ this!name "foo"))))
function () {
    return function () {
        return this.name + "foo"
    }
};


> (test (fn ()
          ((fn ()
             (+ name "foo")))))
function () {
    return name + "foo"
};


> (test (fn ()
          ((fn ()
             (+ this!name "foo")))))
function () {
    return this.name + "foo"
};


> (w/optimize? nil
    (test (fn ()
            ((fn ()
               (+ this!name "foo"))))))
function () {
    return (function () {
        return this.name + "foo"
    }).call(this)
};


> (w/optimize? nil
    (test (fn ()
            (let a 10
              (+ this!name "foo")))))
function () {
    return (function (a) {
        return this.name + "foo"
    }).call(this, 10)
};


> (test (fn ()
          (if a (do (+ this!name "foo")))))
function () {
    return a && this.name + "foo"
};


> (test (fn ()
          (if a (do (+ this!name "foo")
                    (+ this!foo "bar")))))
function () {
    return a && (this.name + "foo", this.foo + "bar")
};


> (test (fn ()
          (if a ((fn () (+ this!name "foo"))))))
function () {
    return a && this.name + "foo"
};


> (w/optimize? nil
    (test (fn ()
            (if a (let a 10 (+ name "foo"))))))
function () {
    return a && (function (a) {
        return name + "foo"
    })(10)
};


> (test (fn ()
          (if a (let a 10 (+ name "foo")))))
function () {
    var b;
    return a && (b = 10, name + "foo")
};


> (w/optimize? nil
    (test (fn ()
            (if a (let a 10 (+ this!name "foo"))))))
function () {
    return a && (function (a) {
        return this.name + "foo"
    }).call(this, 10)
};


> (test (fn ()
          (if a (let a 10 (+ this!name "foo")))))
function () {
    var b;
    return a && (b = 10, this.name + "foo")
};



> (test (fn ()
          (let a 5 a)))
function () {
    var a = 5;
    return a
};


> (test (fn ()
          ((list 1 2 3) (let a 5 a))))
function () {
    var a = 5;
    return [1, 2, 3](a)
};


> (test (fn ()
          ((list 1 2 3) (let a 5 a)
                        (let a 10 a))))
function () {
    var a = 5,
        b;
    return [1, 2, 3](a, (b = 10, b))
};


> (test (fn ()
          ((list 1 2 3)!forEach (let a 5 a))))
function () {
    var a = 5;
    return [1, 2, 3].forEach(a)
};


> (test (fn ()
          ((list 1 2 3)!forEach (let a 5 a)
                                (let a 10 a))))
function () {
    var a = 5,
        b;
    return [1, 2, 3].forEach(a, (b = 10, b))
};


> (test (fn ()
          (foo (let a 5 a))))
function () {
    var a = 5;
    return foo(a)
};


> (test (fn ()
          (foo (let a 5 (+ a 10)))))
function () {
    var a = 5;
    return foo(a + 10)
};


> (test (fn ()
          (foo (prn a)
               (let a (prn b) a)
               (prn c)
               (let a (prn d) a))))
function () {
    var e,
        f;
    return foo(console.log(a), (e = console.log(b), e), console.log(c), (f = console.log(d), f))
};


> (test (fn ()
          (foo (let a 5 (++ a 10) a))))
function () {
    var a = 5;
    a += 10;
    return foo(a)
};


> (test (fn ()
          (foo a (let a 5 (++ a 10) a))))
function () {
    var b;
    return foo(a, (b = 5, b += 10, b))
};


> (test (fn ()
          (foo a (with (a 5
                        b 10
                        c 15)
                   (list a b c)))))
function () {
    var b,
        c,
        d;
    return foo(a, (b = 5, c = 10, d = 15, [b, c, d]))
};


> (test (fn ()
          (foo a (let a 5 a))))
function () {
    var b;
    return foo(a, (b = 5, b))
};


> (test (fn ()
          (foo a (bar (let a 5 a)))))
function () {
    var b;
    return foo(a, bar((b = 5, b)))
};


> (test (fn ()
          (foo (let a 5 a)
               (let a 10 a)
               (let a 15 a))))
function () {
    var a = 5,
        b,
        c;
    return foo(a, (b = 10, b), (c = 15, c))
};


> (test (fn ()
          (if (let a 5 a)
              (let a 10 a)
              (let a 15 a))))
function () {
    var a = 5,
        b,
        c;
    return a ? (b = 10, b) : (c = 15, c)
};


> (test (fn ()
          (if (let a 5 a)
              (let a 10 a)
              (let a 15 a)
              (let a 20 a))))
function () {
    var a = 5,
        b,
        c,
        d;
    return a ? (b = 10, b) : (c = 15, c) && (d = 20, d)
};


> (test (fn ()
          (and (let a 5 a)
               (let a 10 a)
               (let a 15 a))))
function () {
    var a = 5,
        b,
        c;
    return a && (b = 10, b) && (c = 15, c)
};


> (test (foo (let a 10 a)))
(function (a) {
    return foo(a)
})(10);


> (test (foo (let a 10 a)
             (let a 15 a)))
(function (a, b) {
    return foo(a, (b = 15, b))
})(10);


> (test (foo (let a 10 a)
             (let a 15 a)
             (let a 20 a)))
(function (a, b, c) {
    return foo(a, (b = 15, b), (c = 20, c))
})(10);


> (test (foo (let a 10 a)
             (let a 15 a)
             (bar (let a 20 a))))
(function (a, b, c) {
    return foo(a, (b = 15, b), bar((c = 20, c)))
})(10);


> (test (let a (let a 5
                 (+ a 15)
                 a)
          (+ a 10)
          a))
(function (a) {
    var b;
    a + 15;
    b = a;
    b + 10;
    return b
})(5);



> (test (document!create-element "div"))
document.createElement("div");


> (test (div foo   "bar"
             style (backgroundColor green
                    display         webkit-box
                    webkitBoxFlex   1
                    cssFloat        left)))
(function (a) {
    a.setAttribute("foo", "bar");
    a.style.backgroundColor = "green";
    a.style.display = "webkit-box";
    a.style.webkitBoxFlex = "1";
    a.style.cssFloat = "left";
    return a
})(document.createElement("div"));


> (test (div foo   "bar"
             style (background-color  green
                    display           webkit-box
                    webkit-box-flex   1
                    css-float         left)))
(function (a) {
    a.setAttribute("foo", "bar");
    a.style.backgroundColor = "green";
    a.style.display = "webkit-box";
    a.style.webkitBoxFlex = "1";
    a.style.cssFloat = "left";
    return a
})(document.createElement("div"));



> (test (fn ()
          (let a 5
            (let b a
              (+ b 5)))))
?



> (test (mac send-request (x parms . body)
          `(chrome!extension!sendRequest ,x (fn ,parms ,@body))))
\


> (test (mac w/element (n x . body)
          `(let ,n (document!createElement ,x)
             (do ,@body)
             ,n)))
\


> (test (mac w/div (x . body)
          `(w/element ,x "div" ,@body)))
\


> (w/optimize? nil
    (test (w/div x
            (x!appendChild
              (w/div x
                (x!setAttribute "foo" "bar"))))))
(function (a) {
    a.appendChild((function (a) {
        a.setAttribute("foo", "bar");
        return a
    })(document.createElement("div")));
    return a
})(document.createElement("div"));


> (test (w/div x
          (x!appendChild
            (w/div x
              (x!setAttribute "foo" "bar")))))
(function (a) {
    var b = document.createElement("div");
    b.setAttribute("foo", "bar");
    a.appendChild(b);
    return a
})(document.createElement("div"));



> (test (var foo "bar"))
var foo = "bar";


> (test (var foo "bar"
             bar "qux"))
var foo = "bar",
    bar = "qux";


> (test (fn ()
          (var foo "bar")))
function () {
    var a = "bar"
};


> (test (fn ()
          (let a 5
            (var a 10)
            a)))
function () {
    var a = 5;
    a = 10;
    return a
};


> (test (fn ()
          (let a 5
            (var a 10)
            a)
          a))
u


> (test (fn ()
          (let a 5 a)
          (var a 10)))
function () {
    var a = 5;
    a;
    var b = 10
};


> (test (fn ()
          (var foo "bar")
          foo))
function () {
    var a = "bar";
    return a
};


> (test (fn ()
          (var foo "bar"
               bar "qux")
          (list foo bar)))
function () {
    var a = "bar",
        b = "qux";
    return [a, b]
};


> (test (fn ()
          (var foo (fn (x) x))
          foo))
function () {
    var a = function (a) {
        return a
    };
    return a
};


> (test (fn ()
          (var foo { foo (fn (x) x)
                     bar (fn (y) y) })
          foo))
function () {
    var a = {
        foo: function (a) {
            return a
        },
        bar: function (a) {
            return a
        }
    };
    return a
};


> (test (fn ()
          (qux (var foo "bar"))))
function () {
    var a = "bar";
    return qux(a)
};


> (test (fn ()
          (qux (var foo "bar"
                    bar "qux"))
          (+ foo 10)))
function () {
    var a = "bar",
        b = "qux";
    qux(b);
    return a + 10
};


> (w/optimize? nil
    (test (fn ()
            (qux (var foo "bar"
                      bar "qux"))
            (+ foo 10))))
function () {
    var a = "bar",
        b = "qux";
    qux(b);
    return a + 10
};


> (test (fn ()
          (qux a (var foo "bar"))))
function () {
    var b;
    return qux(a, b = "bar")
};


> (test (fn ()
          (qux a (var foo "bar"))
          (+ foo 20)))
function () {
    var b;
    qux(a, b = "bar");
    return b + 20
};


> (test (fn ()
          (qux a (var foo "bar"
                      bar "qux"))))
function () {
    var b,
        c;
    return qux(a, (b = "bar", c = "qux"))
};


> (test (fn ()
          (corge (qux (var foo "bar")))))
function () {
    var a = "bar"
    return corge(qux(a))
};


> (test (fn ()
          foo
          (var foo "bar")
          foo))
function () {
    foo;
    var a = "bar";
    return a
};


> (test (fn ()
          a
          (var a "bar")
          a))
function () {
    a;
    var b = "bar";
    return b
};


> (test (fn ()
          (let a 10
            (var b a)
            (+ b 20))))
function () {
    var a = 10;
    var b = a;
    return b + 20
};



> (test (instanceof x Foo))
x instanceof Foo;


> (test (instanceof x Foo Bar Qux))
x instanceof Foo || x instanceof Bar || x instanceof Qux;


> (test (when (instanceof x Foo)
          a
          b
          c))
x instanceof Foo && (a, b, c);


> (test (when (instanceof x Foo Bar Qux)
          a
          b
          c))
x instanceof Foo || x instanceof Bar || x instanceof Qux && (a, b, c);
