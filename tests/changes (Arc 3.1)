> (= namespace arc3-namespace)
#<namespace:0>

;=============================================================================
;  readline
;=============================================================================

> (fromstring "one\n\nthree\n" (drain (readline)))
("one" "" "three")


> (readline:instring "")
nil

> (readline:instring "foo")
"foo"

> (readline:instring "\n")
""

> (readline:instring "foo\r\n")
"foo"


> (= foo (instring "foo\r\n"))
#<input-port:string>

> (readline foo)
"foo"

> (peekc foo)
nil


> (= foo (instring "foo\r\nbar"))
#<input-port:string>

> (readline foo)
"foo"

> (peekc foo)
#\b


> (= foo (instring "foo\ra"))
#<input-port:string>

> (readline foo)
"foo\ra"

> (peekc foo)
nil


> (= foo (instring "foo\r"))
#<input-port:string>

;; TODO: not sure about this
> (readline foo)
"foo\r"

> (peekc foo)
nil


;=============================================================================
;  assoc
;=============================================================================

> (assoc '((b 10) (a 5)) 'a)
(a 5)

> (assoc '((b 10) (a 5)) 'b)
(b 10)

> (assoc '((b 10) (a 5)) 'c)
nil


;=============================================================================
;  Assignment
;=============================================================================

> (macex-all '(= (foo bar) 5))
(sref foo 5 bar)

> (macex-all '(= (foo 'bar) 5))
((fn (g1) (sref foo 5 g1)) (quote bar))

> (macex-all '(= (foo (bar qux)) 5))
((fn (g1) (sref foo 5 g1)) (bar qux))


> (macex-all '(zap + (foo bar) 1))
(sref foo (+ (foo bar) 1) bar)

> (macex-all '(zap + (foo 'bar) 1))
((fn (g1) (sref foo (+ (foo g1) 1) g1)) (quote bar))


> (macex-all '(zap + (foo (bar)) 1))
((fn (g1) (sref foo (+ (foo g1) 1) g1)) (bar))

> (macex-all '(zap + (foo (bar qux)) 1))
((fn (g1) (sref foo (+ (foo g1) 1) g1)) (bar qux))


> (macex-all '(zap + (foo (bar) (qux)) 1))
((fn (g1 g2) (sref foo (+ (foo g1 g2) 1) g1 g2)) (bar) (qux))


> (macex-all '(or= (foo (bar qux)) 5))
((fn (g1) (if (no (foo g1)) (sref foo 5 g1))) (bar qux))


> (macex-all '(push 5 (foo (bar qux))))
((fn (g1) (sref foo (cons 5 (foo g1)) g1)) (bar qux))

> (macex-all '(pushnew 5 (foo (bar qux))))
((fn (g1) (sref foo (adjoin 5 (foo g1)) g1)) (bar qux))


> (ac-compile '(swap foo bar))
((racket-lambda (g1) (#<fn:ac-assign-global-raw> #<namespace:0> (racket-quote foo) (#<fn:ac-lookup-global-arg> bar)) (#<fn:ac-assign-global-raw> #<namespace:0> (racket-quote bar) g1)) (#<fn:ac-lookup-global-arg> foo))

> (macex-all '(swap foo bar))
((fn (g1) (assign foo bar) (assign bar g1)) foo)

> (macex-all '(swap (foo 'bar) (bar 'foo)))
((fn (g1 g2) ((fn (g3) (sref foo (bar g2) g1) (sref bar g3 g2)) (foo g1))) (quote bar) (quote foo))

> (macex-all '(swap (foo 'bar) (bar (qux foo))))
((fn (g1 g2) ((fn (g3) (sref foo (bar g2) g1) (sref bar g3 g2)) (foo g1))) (quote bar) (qux foo))

> (macex-all '(swap (foo '(bar)) (bar (qux foo))))
((fn (g1 g2) ((fn (g3) (sref foo (bar g2) g1) (sref bar g3 g2)) (foo g1))) (quote (bar)) (qux foo))

> (macex-all '(swap (foo (bar qux)) (bar (qux foo))))
((fn (g1 g2) ((fn (g3) (sref foo (bar g2) g1) (sref bar g3 g2)) (foo g1))) (bar qux) (qux foo))


> (macex-all '(togglemem x (foo (bar qux))))
((fn (g3) (sref foo ((fn (g1 g2) (if (mem g1 g2) (rem g1 g2) (adjoin g1 g2))) x (foo g3)) g3)) (bar qux))


> (ac-compile '(rotate a b c d))
((racket-lambda (g1) (#<fn:ac-assign-global-raw> #<namespace:0> (racket-quote a) (#<fn:ac-lookup-global-arg> b)) (#<fn:ac-assign-global-raw> #<namespace:0> (racket-quote b) (#<fn:ac-lookup-global-arg> c)) (#<fn:ac-assign-global-raw> #<namespace:0> (racket-quote c) (#<fn:ac-lookup-global-arg> d)) (#<fn:ac-assign-global-raw> #<namespace:0> (racket-quote d) g1)) (#<fn:ac-lookup-global-arg> a))

> (macex-all '(rotate a b c d))
((fn (g1) (assign a b) (assign b c) (assign c d) (assign d g1)) a)

> (macex-all '(rotate (a b) (c d) (e f)))
((fn (g1) (sref a (c d) b) (sref c (e f) d) (sref e g1 f)) (a b))

> (macex-all '(rotate (a 'b) (c d) (e (f g))))
((fn (g1 g2) ((fn (g3) (sref a (c d) g1) (sref c (e g2) d) (sref e g3 g2)) (a g1))) (quote b) (f g))

> (macex-all '(rotate (a 'b) (c (d 5)) (e (f g))))
((fn (g1 g2 g3) ((fn (g4) (sref a (c g2) g1) (sref c (e g3) g2) (sref e g4 g3)) (a g1))) (quote b) (d 5) (f g))

> (macex-all '(rotate (foo (bar qux)) (foo (bar qux)) (foo (bar qux))))
((fn (g1 g2 g3) ((fn (g4) (sref foo (foo g2) g1) (sref foo (foo g3) g2) (sref foo g4 g3)) (foo g1))) (bar qux) (bar qux) (bar qux))


> (macex-all '(push 1 (pop x)))
(sref push (cons 1 ((ac-fn (g1) ((ac-fn (g2) (ac-assign x (cdr g1)) g2) (car g1))) x)) x)

> (macex-all '(= (if (foo a) b c d) 5))
((fn (g1 g2) (ac-if g2 (ac-assign a g1) (ac-assign b g1))) 5 (foo a))

> (macex-all '(= (if (foo a) b c (bar d) e f) 5))
((fn (g1 g2 g3) (ac-if g2 (ac-assign a g1) (ac-assign b g1) g3 (ac-assign e g1) (ac-assign f g1))) 5 (foo a) (bar d))


;=============================================================================
;  expand=
;=============================================================================

> (expand= 'foo 10)
(#<mac:with> nil (#<mac:assign> foo 10))


> (expand= 'foo.bar 10)
(#<mac:with> nil (#<mac:sref-mac> foo 10 bar))

> (expand= '(foo bar) 10)
(#<mac:with> nil (#<mac:sref-mac> foo 10 bar))

> (expand= 'foo!bar 10)
(#<mac:with> (g1 (quote bar)) (#<mac:sref-mac> foo 10 g1))


> (expand= '(car foo) 10)
(#<mac:with> nil (#<mac:sref-mac> car 10 foo))

> (expand= '(car (foo bar)) 10)
(#<mac:with> (g1 (foo bar)) (#<mac:sref-mac> car 10 g1))


> (expand= '(car (foo bar) (qux)) 10)
(#<mac:with> (g1 (foo bar) g2 (qux)) (#<mac:sref-mac> car 10 g1 g2))

> (macex-all (expand= '(car (foo bar) (qux)) 10))
((fn (g1 g2) (sref car 10 g1 g2)) (foo bar) (qux))

> (with (foo  (fn (x) x)
         bar  5
         qux  (fn () 15))
    (= (car (foo bar) (qux)) 10))
error: can't set reference #<procedure:car> 5 10 15


> (expand= '(assoc (foo 'bar) 'qux) 5)
(#<mac:with> (g1 (foo #<quoted>) g2 #<quoted>) (#<mac:sref-mac> assoc 5 g1 g2))

> (macex-all (expand= '(assoc (foo 'bar) 'qux) 5))
((fn (g1 g2) (sref assoc 5 g1 g2)) (foo (quote bar)) (quote qux))


> (expand= '(assoc foo bar) 10)
(#<mac:with> nil (#<mac:sref-mac> assoc 10 foo bar))

> (expand= '(assoc foo 'bar) 10)
(#<mac:with> (g1 #<quoted>) (#<mac:sref-mac> assoc 10 foo g1))

> (expand= '(alref foo 'bar) 10)
(#<mac:with> (g1 #<quoted>) (#<mac:sref-mac> alref 10 foo g1))


> (expand= '(foo (car (car foo))) 10)
(#<mac:with> (g1 (car (car foo))) (#<mac:sref-mac> foo 10 g1))

> (expand= '(foo:car:car foo) 10)
(#<mac:with> (g1 (car (car foo))) (#<mac:sref-mac> foo 10 g1))


> (expand= '(car (car (car foo))) 10)
(#<mac:with> (g1 (car (car foo))) (#<mac:sref-mac> car 10 g1))

> (expand= '(car:car:car foo) 10)
(#<mac:with> (g1 (car (car foo))) (#<mac:sref-mac> car 10 g1))


> (expand= '(~foo:bar:qux (~~bar bar:qux 5)) 10)
(#<mac:with> (g1 (foo (bar (qux (no (no (bar (#<mac:compose> bar qux) 5))))))) (#<mac:sref-mac> no 10 g1))

> (macex-all (expand= '(~foo:bar:qux (~~bar bar:qux 5)) 10))
((fn (g1) (sref no 10 g1)) (foo (bar (qux (no (no (bar (compose bar qux) 5)))))))

> (ac-compile (expand= '(~foo:bar:qux (~~bar bar:qux 5)) 10))
u


;=============================================================================
;  setforms
;=============================================================================

> (setforms 'foo)
(nil foo #<fn>)

> (setforms '(car 5))
(nil (car 5) #<fn>)

> (setforms '(car (car (car 5))))
((g1 (car (car 5))) (car g1) #<fn>)

> (setforms '(foo 5))
(nil (foo 5) #<fn>)


;=============================================================================
;  Optional args
;=============================================================================

> (def foo (a (o b 5) (o c 10))
    (list a b c))

> (foo 1)
(1 5 10)

> (foo 1 nil nil)
(1 5 10)

> (foo 1 nil 3)
(1 5 3)

> (foo 1 2 3)
(1 2 3)


> ((fn (a (b) (o c 5) (o d) . rest) (list a b c d rest)) 1 '(2 (3)) nil)
(1 2 5 nil nil)

> ((fn (a (b) (o c 5) (o d) . rest) (list a b c d rest)) 1 '(2 (3)) nil nil)
(1 2 5 nil nil)

> ((fn (a (b) (o c 5) (o d) . rest) (list a b c d rest)) 1 '(2 (3)) nil nil 5 6 7)
(1 2 5 nil (5 6 7))


;=============================================================================
;  Lists
;=============================================================================

> (list*)
nil

> (list* 1)
1

> (list* 1 2)
(1 . 2)

> (list* 1 2 3)
(1 2 . 3)

> (list* 1 2 (list 3 4 5))
(1 2 3 4 5)

> (list* (list 1 2 3))
(1 2 3)


> (join '(1 2) 3)
(1 2 . 3)


> (mappend [list _ 1] '(a b c d))
(a 1 b 1 c 1 d 1)

> (mappend [list _ 1] '(a b c . d))
(a 1 b 1 c 1 . d)u


;=============================================================================
;  whilet
;=============================================================================

> (= my-alist '((a 1) (b 2) (c 3) (d 4)))
((a 1) (b 2) (c 3) (d 4))u

> (whilet (k v) pop.my-alist
    (prn k " " v))
a 1
b 2
c 3
d 4
nilu


;=============================================================================
;  uniq
;=============================================================================

> (w/uniq-counter 1 (uniq))
g1

> (w/uniq-counter 1 (uniq "foo"))
foo1

> (w/uniq-counter 1 (uniq) uniq-counter)
2

> (w/uniq-counter 1 (uniq "foo") uniq-counter)
2

> (w/uniq-counter 1 (uniq "foo" 5))
foo5

> (w/uniq-counter 1 (uniq "foo" 5) uniq-counter)
1

> (w/uniq-counter 1 (uniq) (uniq))
g2
