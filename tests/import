> (use del import)
t


==============================================================================


> (= foo (new-namespace))
#<namespace>


> (foo '+)
#<fn:+>

> (keys foo)
nil


> (= (foo '+) "nou")
"nou"

> (foo '+)
"nou"

> (keys foo)
(+)


> foo<-parent
#<namespace __built-ins*>

> (foo<-parent '+)
#<fn:+>


> (del (foo '+))
"nou"

> (foo '+)
#<fn:+>

> (keys foo)
nil


==============================================================================


;> (eval '(+ 10 5) (this-namespace))
15


> (eval '(+ 10 5) (table))
error: undefined variable: +

> (eval '(+ 10 5) (obj + +))
15


> (eval '(+ 10 5) __built-ins*)
15

> (eval '(+ 10 5) (new-namespace))
15


> (eval '(+ 10 5) (new-namespace (table)))
error: undefined variable: +

> (eval '(+ 10 5) (new-namespace (obj + +)))
15


> (w/eval (table)
    (+ 5 10))
error: undefined variable: +

> (w/eval (obj + +)
    (+ 5 10))
15


> (let namespace 'nou (eval '(+ 5 10) (obj + +)))
15

> (let namespace 'nou (eval '(+ 5 10)))
15


> (w/namespace 'nou (eval '(+ 5 10) (obj + +)))
15

> (w/namespace 'nou (eval '(+ 5 10)))
u

> (w/eval 'nou
    (+ 5 10))
error: Can't coerce nou #<fn:g...>


==============================================================================


> (= foo (new-namespace))
#<namespace>


> bar
error: undefined variable: bar

> (foo 'bar)
nil


> (w/eval foo
    (assign bar 'qux))
qux

> bar
error: undefined variable: bar

> (w/eval foo bar)
qux

> (foo 'bar)
qux

> (foo 'qux)
nil


> (eval 'bar)
error: undefined variable: bar

> (w/eval foo bar)
qux

> bar
error: undefined variable: bar



> (w/eval foo
    (assign yesm bar))
qux

> (foo 'yesm)
qux



> (eval 'yesm)
error: undefined variable: yesm

> (w/eval foo yesm)
qux

> yesm
error: undefined variable: yesm



> (w/eval foo (let a 5 a))
5

> (eval 'a)
error: undefined variable: a

> (foo 'a)
nil

> (w/eval foo a)
error: undefined variable: a



> (w/eval foo
    (let a 5 (assign a 10) a))
10

> (eval 'a)
error: undefined variable: a

> (foo 'a)
nil

> (w/eval foo a)
error: undefined variable: a



> (eval 'ppr)
error: undefined variable: ppr

> (import-as pprint "../arc3.1/pprint.arc")
nil

> (eval 'ppr)
error: undefined variable: ppr


> pprint
#<namespace>

> pprint!ppr
#<fn>


> (sort < (keys pprint))
(bodops* lpar oneline* ppr ppr-call ppr-progn pprest rpar sp write-spaced)


> (tostring (pprint!ppr "foobar"))
"\"foobar\""

> (pprint!ppr '(do (fn ()) (+ aa 5) (+ bb 5) (+ cc 5)))
(do (fn nil)
    (+ aa 5)
    (+ bb 5)
    (+ cc 5))t


> (w/namespace pprint (tostring (pprint!ppr "foobar")))
"\"foobar\""

> (w/namespace pprint (pprint!ppr '(do (fn ()) (+ aa 5) (+ bb 5) (+ cc 5))))
(do (fn nil)
    (+ aa 5)
    (+ bb 5)
    (+ cc 5))t


> (eval 'ppr)
error: undefined variable: ppr


==============================================================================


> (= foo (new-namespace))
#<namespace>

> foo!+
#<fn:+>

> a
error: undefined variable: a

> (= foo!a 50)
50

> foo!a
50

> a
error: undefined variable: a

> (w/namespace foo (+ a 50))
error: undefined variable: a

> (w/eval foo (+ a 27))
77

> a
error: undefined variable: a

> (foo!+ a 50)
error: undefined variable: a


> (= foo!bar (fn () qux))
#<fn>

> foo!bar
#<fn>

> (foo!bar)
error: undefined variable: qux

> (= foo!qux "hiya!")
"hiya!"

> (foo!bar)
error: undefined variable: qux

> foo!qux
"hiya!"

> (w/namespace foo (foo!bar))
error: undefined variable: qux


> (del foo!qux)
"hiya!"

> (w/eval foo
    (= bar (fn () qux)))
#<fn>

> foo!bar
#<fn>

> (foo!bar)
error: undefined variable: qux

> (= foo!qux "hiya!")
"hiya!"

> (foo!bar)
"hiya!"

> foo!qux
"hiya!"

> (w/namespace foo (foo!bar))
"hiya!"

> (w/eval foo (foo!bar))
"hiya!"

> qux
error: undefined variable: qux

> (eval 'qux)
error: undefined variable: qux


==============================================================================


> (do (= foo (new-namespace))
      (eval '(= bar (fn () qux)) foo)
      (prn foo!bar)
      (= foo!qux "hiya")
      (foo!bar))
#<fn>
"hiya"


==============================================================================


> (= foo (new-namespace))
#<namespace>

> (= bar (new-namespace))
#<namespace>

> (w/eval foo
    (def helper (x)
      (+ 5 x)))
#<fn>

> (w/eval foo
    (mac something ()
      `(helper 10)))
#<mac>

> (eval `(= foo ',foo) bar)
#<namespace>

> (w/eval bar
    (foo!something))
15

> (w/eval bar
    (w/eval foo
      (something)))
15

> (w/eval bar
    (w/namespace foo
      (something)))
error: undefined variable: something

> (w/eval bar
    (w/eval namespace
      (something)))
error: undefined variable: something

> (w/eval bar
    (something))
error: undefined variable: something

> (w/eval bar
    (= something foo!something))
#<mac>

> (w/eval bar
    (something))
15

> (w/eval bar
    (something))
15

> (w/eval bar
    (w/eval namespace
      (something)))
15

> (w/eval bar
    (w/namespace namespace
      (something)))
15


==============================================================================


> (w/eval (obj + +)
    (+ 10 5))
15


> (w/eval (obj + +)
    (/ 10 5))
error: undefined variable: /


> (w/eval (obj + +)
    (+ 10 5)
    (/ 5 20))
error: undefined variable: /


> (w/eval (table)
    (+ 10 5))
error: undefined variable: +


> (w/eval (table) 5)
5


==============================================================================


> (w/eval (new-namespace)
    random-name)
error: undefined variable: random-name


> (w/eval (new-namespace)
    +)
#<fn:+>


> (w/eval (new-namespace)
    namespace)
#<namespace>


> (w/eval (new-namespace)
    w/namespace)
#<mac>


> (w/eval (new-namespace)
    (w/namespace "foo"
      namespace))
"foo"


> (w/eval (new-namespace)
    stdin)
#<input-port:stdin>


> (w/eval (new-namespace)
    (w/stdin "foo"))
error: current-input-port: expects argument of type <input-port>; given "foo"


> (w/eval (new-namespace)
    (w/stdin (instring "foo")))
nil


> (w/eval (new-namespace)
    (w/stdin (instring "foo") stdin))
#<input-port:string>


> (w/eval (new-namespace)
    (w/stdin (instring "foo")
      (allchars stdin)))
"foo"


==============================================================================


> ((new-namespace) '+)
#<fn:+>


> ((new-namespace nil) '+)
error: Function call on inappropriate object nil {+ nil . nil}


> ((new-namespace (obj + +
                       - -
                       / /
                       * *))
   '+)
#<fn:+>


> ((new-namespace (new-namespace)) '+)
#<fn:+>

> ((new-namespace (new-namespace (obj + 5))) '+)
5


==============================================================================


> (= foo (new-namespace))
#<namespace>

> (w/eval foo
    (dynamic bar (imac (a b c) `(+ ,a ,b ,c)))
    bar)
#<mac>

> (w/eval foo bar)
#<mac>

> (w/eval foo
    (bar 1 2 3))
6
