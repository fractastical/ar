> (import boyer-moore)
nil

> (boyer-posmatch "foo" "foobar")
0

> (boyer-posmatch "foo" "barfoo")
3

> (boyer-posmatch "foo" "barufoo")
4

> (boyer-posmatch "foo" "barfo")
nil

> (boyer-posmatch "foobar" "quxbarfoo")
nil

> (boyer-posmatch "foobarquxcorgenou" "adadadadadadadadadadadadadad")
nil

> (boyer-posmatch "Chrono Trigger Resurrection - Schala's Theme"
                  "Chrono Trigger Resurrection OST Schala's Theme <ciNjsDPjrSw>.mp4")
nil


> (let x (map boyer-moore-process '("foobar" "bar" "qux"))
    (some [boyer-moore-search _ "quxbarfoo"] x))
3

> (let x (map boyer-moore-process '("foo" "bar" "qux"))
    (some [boyer-moore-search _ "uoobarquxcorge"] x))
3

> (let x (map boyer-moore-process '("foo" "bar" "qux"))
    (some [boyer-moore-search _ "ufoobarquxcorge"] x))
1

> (let x (map boyer-moore-process '("foo" "bar" "qux"))
    (some [boyer-moore-search _ "ufobarquxcorge"] x))
3


> (multi-match '("foo" "bar" "qux") '("corge" "foo" "bar" "qux"))
("foo" "bar" "qux")

> (boyer-multi-match '("foo" "bar" "qux") '("corge" "foo" "bar" "qux"))
("foo" "bar" "qux")

> (let x (map boyer-moore-process '("foo" "bar" "qux"))
    (boyer-multi-match1 x '("corge" "foo" "bar" "qux")))
("foo" "bar" "qux")


> (multi-match '("foo" "bar" "qux") '("ufoobarquxcorge"))
("ufoobarquxcorge")

> (boyer-multi-match '("foo" "bar" "qux") '("ufoobarquxcorge"))
("ufoobarquxcorge")

> (let x (map boyer-moore-process '("foo" "bar" "qux"))
    (boyer-multi-match1 x '("ufoobarquxcorge")))
("ufoobarquxcorge")
