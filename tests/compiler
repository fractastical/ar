;=============================================================================
;  Compiler specific things
;=============================================================================

> ((cadr (car (ac-compile ''(1 2 3) nil))))
(1 2 3)


> (racket-parameterize ((racket-current-namespace (racket-current-namespace)))
    (racket-current-namespace))
error: racket-parameterize: bad syntax in: racket-parameterize


;=============================================================================
;  fn
;=============================================================================

> (ac-compile '(fn args args) nil)
(racket-lambda args (racket-set! args (#<fn:list->mlist> args)) args)


> (ac-compile '(fn (a b c) (list a b c)) nil)
(racket-lambda (a b c) (#<fn:ac-funcall3> list a b c))


> (ac-compile '(fn (a (o b 5) c) (list a b c)) nil)
error:

> (ac-compile '(fn (a b (o c 5)) (list a b c)) nil)
(racket-lambda (a b (c 5)) (#<fn:ac-funcall3> list a b c))

> (ac-compile '(fn (a b (o c nil)) (list a b c)) nil)
(racket-lambda (a b (c nil)) (#<fn:ac-funcall3> list a b c))

> (ac-compile '(fn (a b (o c)) (list a b c)) nil)
(racket-lambda (a b (c nil)) (#<fn:ac-funcall3> list a b c))


> (ac-compile '(fn (a b . c) (list a b c)) nil)
(racket-lambda (a b . c) (racket-set! c (#<fn:list->mlist> c)) (#<fn:ac-funcall3> list a b c))


> (ac-compile '(fn (a b (c (d e f (g)))) (list a b c d e f g)) nil)
(racket-lambda (a b (c nil)) (#<fn:ac-funcall3> list a b c))


;=============================================================================
;  %nocompile
;=============================================================================

> (ac-compile '(%nocompile 5 10 (foo 10) (bar (qux (%compile (corge)))) (%compile (foo 10)) (%compile 5)) nil)
(racket-begin 5 10 (foo 10) (bar (qux (#<fn:ac-funcall0> corge))) (#<fn:ac-funcall1> foo 10) 5)

> (%nocompile (racket-parameterize ((racket-current-namespace (racket-current-namespace))) (racket-current-namespace)))
#<namespace:0>

> (%nocompile (racket-parameterize ((racket-current-namespace (racket-current-namespace)))
    (%compile (+ 10 5) (+ 15 20))))
#<namespace:0>

> (let ac-compile nil
    (%nocompile (+ 10 5)))
15

> (let %nocompile nil
    (%nocompile (+ 10 5)))
error:


;=============================================================================
;  Keyword args
;=============================================================================

> ((fn (:a b c) (list a b c)) 1)
error:

> ((fn (:a b c) (list a b c)) 1 2)
(nil 1 2)

> ((fn (:a b c) (list a b c)) 1 2 3)
error:

> ((fn (:a b c) (list a b c)) 1 2 :a 3)
(3 1 2)

> ((fn (:a b c) (list a b c)) :a 3 1 2)
(3 1 2)


> ((fn ((o :a) b c) (list a b c)) 1 2)
(nil 1 2)

> ((fn ((o :a) b c) (list a b c)) 1 2 :a 10)
(10 1 2)

> ((fn ((o :a 15) b c) (list a b c)) 1 2)
(15 1 2)

> ((fn ((o :a 15) b c) (list a b c)) 1 2 :a 3)
(3 1 2)

> ((fn (b c (o :a 15)) (list a b c)) 1 2)
(15 1 2)

> ((fn (b c (o :a 15)) (list a b c)) 1 2 :a 3)
(3 1 2)


> ((fn (:a (b c)) (list a b c)))
(nil nil nil)

> ((fn (:a (b c)) (list a b c)) 1 2)
error:

> ((fn (:a (b c)) (list a b c)) '(1 2))
(nil 1 2)

> ((fn (:a (b c)) (list a b c)) '(1 2) :a 5)
(5 1 2)


;=============================================================================
;  Optional args
;=============================================================================

> (def foo (a (o b 5) (o c 10))
    (list a b c))

> (foo 1)
(1 5 10)

> (foo 1 nil nil)
(1 5 10)

> (foo 1 nil 3)
(1 5 3)

> (foo 1 2 3)
(1 2 3)


> ((fn (a (b) (o c 5) (o d) . rest) (list a b c d rest)) 1 '(2 (3)) nil)
(1 2 5 nil nil)

> ((fn (a (b) (o c 5) (o d) . rest) (list a b c d rest)) 1 '(2 (3)) nil nil)
(1 2 5 nil nil)

> ((fn (a (b) (o c 5) (o d) . rest) (list a b c d rest)) 1 '(2 (3)) nil nil 5 6 7)
(1 2 5 nil (5 6 7))


;=============================================================================
;  Lists
;=============================================================================

> (list*)
nil

> (list* 1)
1

> (list* 1 2)
(1 . 2)

> (list* 1 2 3)
(1 2 . 3)

> (list* 1 2 (list 3 4 5))
(1 2 3 4 5)

> (list* (list 1 2 3))
(1 2 3)
