;; globals in compiler.arc, in the order of definition
'(t nil ac-dot ac-local-env ac-eval-runtime arc3-namespace ac-namespace sig ac-names ac-sref-parms ac-assign-sig ac-def ac-mac ac-prn namespace-get namespace-set ac-tnil ac-no ac-nil ac-true ac-bool ac-isa ac-caris map1 dottedmap1 string1 ac-uniq-counter uniq ac-var bound ac-tagged annotate ac-tagged-type ac-tagged-rep ac-exint? type rep parameter alias err on-err details print-w/list name print-w/name print sread cons list car cdr scar scdr caar cadr cddr list* len join ac-mappend assoc-ref assoc alref plist plref ac-arg-list* ac-apply-non-fn ac-apply apply ac-functional-position? ac-lex? ac-funcall0 ac-funcall1 ac-funcall2 ac-funcall3 ac-funcall4 ac-macro? ac-mac-call ac-args1 ac-args ac-pipe-compose ac-return-apply compose complement ac-decompose ac-call ac-nocompile % ac-local-var ac-undefined-var ac-lookup-global-raw ac-lookup-global ac-lookup-global-arg ac-nolookup? ac-global-var ac-local-assign ac-assign-global ac-assign-global-undefined ac-assign-global-defined ac-assign-global-raw ac-global-assign ac-assign1 ac-assignn ac-assign assign ac-fn-optional-on-nil? ac-fn-required-args? ac-fn-excess-args? ac-fn-rigid-destructuring? ac-fn-body ac-fn-let* ac-add-to ac-keyword->symbol ac-fn-keyword-args ac-fn-optional-args ac-fn-destructuring-args ac-fn-required-args ac-fn-end-of-args ac-fn-normal-args ac-fn-args ac-fn fn ac-if if ac-quote quote qq-expand-pair qq-expand quasiquote qs-expand-quote qs-expand-pair qs-expand quasisyntax sref ac-pairwise ac-binary is2 is ac-splice = =sig =sigdef =sigmac ssexpand ssyntax ac-compile eval ac-eval-all ac-load ac-readtable-dot-syntax ac-readtable-square-bracket ac-readtable-curly-bracket ac-readtable)


;; needs to be extendable in Arc
ac-macro?
ac-apply-non-fn
sref
parameter
alias
compose
complement
ac-local-var
ac-lookup-global
ac-lookup-global-arg
ac-global-var
ac-local-assign
ac-assign-global
ac-assign-global-raw
ac-global-assign (maybe, but it's here based on principle)
assign
fn
quote
ssexpand
ssyntax

;; needs to be extendable in Arc but I'll probably move it into Arc anyways
ac-fn-keyword-args
ac-fn-optional-args
ac-fn-destructuring-args
ac-fn-required-args
ac-fn-end-of-args
ac-fn-normal-args

;; probably needs to be extendable in Arc
ac-args1
ac-fn
ac-if
ac-compile

;; maybe needs to be extendable in Arc
sig
err
car
cdr
scar
scdr
cadr
cddr
ac-fn-args


;; mutually exclusive >
ac-call
ac-pipe-compose
ac-mac-call


;; probably doesn't need to be extendable in Arc
arc3-namespace
ac-names
annotate
rep
sread
cons
list
list*
join
ac-return-apply
ac-assign1
ac-assignn
ac-assign

;; doesn't need to be extendable in Arc (should still allow for overwriting)
t
nil
ac-dot
ac-prn
namespace-get
namespace-set
ac-tnil
ac-no
ac-nil
ac-true
ac-bool
ac-isa
ac-caris
map1
dottedmap1
string1
ac-var
ac-tagged
ac-tagged-type
ac-tagged-rep
ac-exint?
type
ac-arg-list*
ac-apply
apply
ac-lex?
ac-funcall0
ac-funcall1
ac-funcall2
ac-funcall3
ac-funcall4
ac-args
ac-decompose
ac-nocompile
ac-add-to
ac-keyword->symbol
ac-pairwise
ac-binary
is2
ac-splice
eval
ac-eval-all
ac-load
ac-readtable-dot-syntax
ac-readtable-square-bracket
ac-readtable-curly-bracket
ac-readtable

;; doesn't need to be extendable in Arc because it's a parameter
ac-local-env
ac-eval-runtime
ac-namespace
ac-uniq-counter
ac-functional-position?
ac-fn-optional-on-nil?
ac-fn-required-args?
ac-fn-excess-args?
ac-fn-rigid-destructuring?
ac-fn-body
ac-fn-let*

;; doesn't need to be extendable in Arc because it's a Racket macro
ac-sref-parms
ac-assign-sig
ac-def
ac-mac


;; doesn't need to be extendable in Arc because I plan to move them into Arc
;; or because they aren't used in the compiler
uniq
bound
on-err
details
print-w/list
name
print-w/name
print
caar
len
ac-mappend
assoc-ref
assoc
alref
plist
plref
%
ac-undefined-var
ac-lookup-global-raw
if
qq-expand-pair
qq-expand
quasiquote
qs-expand-quote
qs-expand-pair
qs-expand
quasisyntax
is
=
=sig
=sigdef
=sigmac

;; doesn't need to be extendable in Arc because I plan to remove it
ac-nolookup?
ac-assign-global-undefined
ac-assign-global-defined
ac-quote
